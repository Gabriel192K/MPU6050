
Reading Raw Values.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001a5a  00001aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800122  00800122  00001b10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003741  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  000054fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001163  00000000  00000000  000066a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000708  00000000  00000000  00007808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db4  00000000  00000000  00007f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bb7  00000000  00000000  00008cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000a87b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__dtors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_14>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_18>
      4c:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__vector_19>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4d 50       	subi	r20, 0x0D	; 13
      6a:	55 36       	cpi	r21, 0x65	; 101
      6c:	30 35       	cpi	r19, 0x50	; 80
      6e:	30 20       	and	r3, r0
      70:	64 69       	ori	r22, 0x94	; 148
      72:	64 6e       	ori	r22, 0xE4	; 228
      74:	27 74       	andi	r18, 0x47	; 71
      76:	20 73       	andi	r18, 0x30	; 48
      78:	74 61       	ori	r23, 0x14	; 20
      7a:	72 74       	andi	r23, 0x42	; 66
      7c:	65 64       	ori	r22, 0x45	; 69
      7e:	0a 00       	.word	0x000a	; ????

00000080 <_ZZ4mainE3__c_0>:
      80:	4d 50 55 36 30 35 30 20 73 74 61 72 74 65 64 0a     MPU6050 started.
	...

00000091 <_ZZ4mainE3__c>:
      91:	4d 50 55 36 30 35 30 20 52 61 77 20 56 61 6c 75     MPU6050 Raw Valu
      a1:	65 73 20 45 78 61 6d 70 6c 65 0a 00 00              es Example...

000000ae <__ctors_start>:
      ae:	47 01       	movw	r8, r14
      b0:	c5 03       	fmuls	r20, r21
      b2:	60 05       	cpc	r22, r0
      b4:	80 06       	cpc	r8, r16

000000b6 <__ctors_end>:
      b6:	4e 01       	movw	r8, r28
      b8:	67 05       	cpc	r22, r7

000000ba <__dtors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ea e5       	ldi	r30, 0x5A	; 90
      ce:	fa e1       	ldi	r31, 0x1A	; 26
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a2 32       	cpi	r26, 0x22	; 34
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	21 e0       	ldi	r18, 0x01	; 1
      de:	a2 e2       	ldi	r26, 0x22	; 34
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a2 36       	cpi	r26, 0x62	; 98
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cb e5       	ldi	r28, 0x5B	; 91
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__tablejump2__>
      fc:	c7 35       	cpi	r28, 0x57	; 87
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 2b 06 	call	0xc56	; 0xc56 <main>
     106:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__do_global_dtors>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_ZN8__Time__C1EPVhS1_S1_S1_S1_>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
     10e:	ef 92       	push	r14
     110:	ff 92       	push	r15
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
     116:	fc 01       	movw	r30, r24
     118:	76 83       	std	Z+6, r23	; 0x06
     11a:	65 83       	std	Z+5, r22	; 0x05
     11c:	50 87       	std	Z+8, r21	; 0x08
     11e:	47 83       	std	Z+7, r20	; 0x07
     120:	32 87       	std	Z+10, r19	; 0x0a
     122:	21 87       	std	Z+9, r18	; 0x09
     124:	14 87       	std	Z+12, r17	; 0x0c
     126:	03 87       	std	Z+11, r16	; 0x0b
     128:	f6 86       	std	Z+14, r15	; 0x0e
     12a:	e5 86       	std	Z+13, r14	; 0x0d
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	ff 90       	pop	r15
     132:	ef 90       	pop	r14
     134:	08 95       	ret

00000136 <_Z41__static_initialization_and_destruction_0ii>:
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	a1 f4       	brne	.+40     	; 0x16a <_Z41__static_initialization_and_destruction_0ii+0x34>
     142:	6f 3f       	cpi	r22, 0xFF	; 255
     144:	7f 4f       	sbci	r23, 0xFF	; 255
     146:	89 f4       	brne	.+34     	; 0x16a <_Z41__static_initialization_and_destruction_0ii+0x34>
     148:	0f 2e       	mov	r0, r31
     14a:	f6 e4       	ldi	r31, 0x46	; 70
     14c:	ef 2e       	mov	r14, r31
     14e:	f1 2c       	mov	r15, r1
     150:	f0 2d       	mov	r31, r0
     152:	07 e4       	ldi	r16, 0x47	; 71
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	2e e6       	ldi	r18, 0x6E	; 110
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	45 e4       	ldi	r20, 0x45	; 69
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	64 e4       	ldi	r22, 0x44	; 68
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	82 e2       	ldi	r24, 0x22	; 34
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN8__Time__C1EPVhS1_S1_S1_S1_>
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	08 95       	ret

00000174 <_ZN8__Time__5beginEv>:
     174:	fc 01       	movw	r30, r24
     176:	84 81       	ldd	r24, Z+4	; 0x04
     178:	81 11       	cpse	r24, r1
     17a:	1f c0       	rjmp	.+62     	; 0x1ba <_ZN8__Time__5beginEv+0x46>
     17c:	f8 94       	cli
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	88 23       	and	r24, r24
     182:	d1 f0       	breq	.+52     	; 0x1b8 <_ZN8__Time__5beginEv+0x44>
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	84 83       	std	Z+4, r24	; 0x04
     188:	a5 81       	ldd	r26, Z+5	; 0x05
     18a:	b6 81       	ldd	r27, Z+6	; 0x06
     18c:	8c 91       	ld	r24, X
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	8c 93       	st	X, r24
     192:	a7 81       	ldd	r26, Z+7	; 0x07
     194:	b0 85       	ldd	r27, Z+8	; 0x08
     196:	8c 91       	ld	r24, X
     198:	82 60       	ori	r24, 0x02	; 2
     19a:	8c 93       	st	X, r24
     19c:	a1 85       	ldd	r26, Z+9	; 0x09
     19e:	b2 85       	ldd	r27, Z+10	; 0x0a
     1a0:	8c 91       	ld	r24, X
     1a2:	82 60       	ori	r24, 0x02	; 2
     1a4:	8c 93       	st	X, r24
     1a6:	a5 85       	ldd	r26, Z+13	; 0x0d
     1a8:	b6 85       	ldd	r27, Z+14	; 0x0e
     1aa:	1c 92       	st	X, r1
     1ac:	a3 85       	ldd	r26, Z+11	; 0x0b
     1ae:	b4 85       	ldd	r27, Z+12	; 0x0c
     1b0:	87 ec       	ldi	r24, 0xC7	; 199
     1b2:	8c 93       	st	X, r24
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	e4 cf       	rjmp	.-56     	; 0x180 <_ZN8__Time__5beginEv+0xc>
     1b8:	78 94       	sei
     1ba:	08 95       	ret

000001bc <_ZN8__Time__6microsEv>:
     1bc:	fc 01       	movw	r30, r24
     1be:	8f b7       	in	r24, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	99 23       	and	r25, r25
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <_ZN8__Time__6microsEv+0x18>
     1c8:	40 81       	ld	r20, Z
     1ca:	51 81       	ldd	r21, Z+1	; 0x01
     1cc:	62 81       	ldd	r22, Z+2	; 0x02
     1ce:	73 81       	ldd	r23, Z+3	; 0x03
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	f8 cf       	rjmp	.-16     	; 0x1c4 <_ZN8__Time__6microsEv+0x8>
     1d4:	8f bf       	out	0x3f, r24	; 63
     1d6:	cb 01       	movw	r24, r22
     1d8:	ba 01       	movw	r22, r20
     1da:	08 95       	ret

000001dc <_ZN8__Time__6millisEv>:
     1dc:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN8__Time__6microsEv>
     1e0:	28 ee       	ldi	r18, 0xE8	; 232
     1e2:	33 e0       	ldi	r19, 0x03	; 3
     1e4:	40 e0       	ldi	r20, 0x00	; 0
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     1ec:	ca 01       	movw	r24, r20
     1ee:	b9 01       	movw	r22, r18
     1f0:	08 95       	ret

000001f2 <_ZN8__Time__11delayMillisEm>:
     1f2:	8f 92       	push	r8
     1f4:	9f 92       	push	r9
     1f6:	af 92       	push	r10
     1f8:	bf 92       	push	r11
     1fa:	cf 92       	push	r12
     1fc:	df 92       	push	r13
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ec 01       	movw	r28, r24
     208:	4a 01       	movw	r8, r20
     20a:	5b 01       	movw	r10, r22
     20c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     210:	6b 01       	movw	r12, r22
     212:	7c 01       	movw	r14, r24
     214:	ce 01       	movw	r24, r28
     216:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	8c 19       	sub	r24, r12
     220:	9d 09       	sbc	r25, r13
     222:	ae 09       	sbc	r26, r14
     224:	bf 09       	sbc	r27, r15
     226:	88 15       	cp	r24, r8
     228:	99 05       	cpc	r25, r9
     22a:	aa 05       	cpc	r26, r10
     22c:	bb 05       	cpc	r27, r11
     22e:	90 f3       	brcs	.-28     	; 0x214 <_ZN8__Time__11delayMillisEm+0x22>
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	ff 90       	pop	r15
     236:	ef 90       	pop	r14
     238:	df 90       	pop	r13
     23a:	cf 90       	pop	r12
     23c:	bf 90       	pop	r11
     23e:	af 90       	pop	r10
     240:	9f 90       	pop	r9
     242:	8f 90       	pop	r8
     244:	08 95       	ret

00000246 <__vector_14>:
Return:   None
*********************************************/
#if defined(__AVR_ATmega328P__)
ISR(TIMER0_COMPA_vect)
#endif
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	8f 93       	push	r24
     252:	9f 93       	push	r25
     254:	af 93       	push	r26
     256:	bf 93       	push	r27
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
        }
}

inline void __Time__::countIRQ(void)
{
    this->counter += MICROS_RESOLUTION;
     25c:	e2 e2       	ldi	r30, 0x22	; 34
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	80 81       	ld	r24, Z
     262:	91 81       	ldd	r25, Z+1	; 0x01
     264:	a2 81       	ldd	r26, Z+2	; 0x02
     266:	b3 81       	ldd	r27, Z+3	; 0x03
     268:	8c 59       	subi	r24, 0x9C	; 156
     26a:	9f 4f       	sbci	r25, 0xFF	; 255
     26c:	af 4f       	sbci	r26, 0xFF	; 255
     26e:	bf 4f       	sbci	r27, 0xFF	; 255
     270:	80 83       	st	Z, r24
     272:	91 83       	std	Z+1, r25	; 0x01
     274:	a2 83       	std	Z+2, r26	; 0x02
     276:	b3 83       	std	Z+3, r27	; 0x03
#if defined(__AVR_ATmega328P__)
ISR(TIMER0_COMPA_vect)
#endif
{
    Time.countIRQ();
}
     278:	ff 91       	pop	r31
     27a:	ef 91       	pop	r30
     27c:	bf 91       	pop	r27
     27e:	af 91       	pop	r26
     280:	9f 91       	pop	r25
     282:	8f 91       	pop	r24
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <_GLOBAL__sub_I__ZN8__Time__C2EPVhS1_S1_S1_S1_>:
     28e:	6f ef       	ldi	r22, 0xFF	; 255
     290:	7f ef       	ldi	r23, 0xFF	; 255
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 9b 00 	call	0x136	; 0x136 <_Z41__static_initialization_and_destruction_0ii>
     29a:	08 95       	ret

0000029c <_GLOBAL__sub_D__ZN8__Time__C2EPVhS1_S1_S1_S1_>:
     29c:	6f ef       	ldi	r22, 0xFF	; 255
     29e:	7f ef       	ldi	r23, 0xFF	; 255
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 9b 00 	call	0x136	; 0x136 <_Z41__static_initialization_and_destruction_0ii>
     2a8:	08 95       	ret

000002aa <_ZN7__TWI__C1EPVhS1_S1_S1_S1_S1_>:
Function: __TWI__()
Purpose:  Constructor to __TWI__ class
Input:    None
Return:   None
*********************************************/
__TWI__::__TWI__(volatile uint8_t* twbr, volatile uint8_t* twsr, volatile uint8_t* twar,\
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	fc 01       	movw	r30, r24
                 volatile uint8_t* twdr, volatile uint8_t* twcr, volatile uint8_t* twamr)
{
    this->twbr = twbr;
     2b8:	76 83       	std	Z+6, r23	; 0x06
     2ba:	65 83       	std	Z+5, r22	; 0x05
    this->twsr = twsr;
     2bc:	50 87       	std	Z+8, r21	; 0x08
     2be:	47 83       	std	Z+7, r20	; 0x07
    this->twar = twar;
     2c0:	32 87       	std	Z+10, r19	; 0x0a
     2c2:	21 87       	std	Z+9, r18	; 0x09
    this->twdr = twdr;
     2c4:	14 87       	std	Z+12, r17	; 0x0c
     2c6:	03 87       	std	Z+11, r16	; 0x0b
    this->twcr = twcr;
     2c8:	f6 86       	std	Z+14, r15	; 0x0e
     2ca:	e5 86       	std	Z+13, r14	; 0x0d
    this->twamr = twamr;
     2cc:	d0 8a       	std	Z+16, r13	; 0x10
     2ce:	c7 86       	std	Z+15, r12	; 0x0f
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	df 90       	pop	r13
     2da:	cf 90       	pop	r12
     2dc:	08 95       	ret

000002de <_Z41__static_initialization_and_destruction_0ii>:
    digitalWrite(&SCL_DOR, SCL_BIT, LOW); /* Set <SCL> Data Output Register as <LOW>*/
    digitalWrite(&SDA_DOR, SDA_BIT, LOW); /* Set <SDA> Data Output Register as <LOW>*/
}

#if defined(__AVR_ATmega328P__)
__TWI__ TWI = __TWI__(&TWBR, &TWSR, &TWAR, &TWDR, &TWCR, &TWAMR);
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	c9 f4       	brne	.+50     	; 0x320 <_Z41__static_initialization_and_destruction_0ii+0x42>
     2ee:	6f 3f       	cpi	r22, 0xFF	; 255
     2f0:	7f 4f       	sbci	r23, 0xFF	; 255
     2f2:	b1 f4       	brne	.+44     	; 0x320 <_Z41__static_initialization_and_destruction_0ii+0x42>
     2f4:	0f 2e       	mov	r0, r31
     2f6:	fd eb       	ldi	r31, 0xBD	; 189
     2f8:	cf 2e       	mov	r12, r31
     2fa:	d1 2c       	mov	r13, r1
     2fc:	f0 2d       	mov	r31, r0
     2fe:	0f 2e       	mov	r0, r31
     300:	fc eb       	ldi	r31, 0xBC	; 188
     302:	ef 2e       	mov	r14, r31
     304:	f1 2c       	mov	r15, r1
     306:	f0 2d       	mov	r31, r0
     308:	0b eb       	ldi	r16, 0xBB	; 187
     30a:	10 e0       	ldi	r17, 0x00	; 0
     30c:	2a eb       	ldi	r18, 0xBA	; 186
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	49 eb       	ldi	r20, 0xB9	; 185
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	68 eb       	ldi	r22, 0xB8	; 184
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	81 e3       	ldi	r24, 0x31	; 49
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN7__TWI__C1EPVhS1_S1_S1_S1_S1_>
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	ff 90       	pop	r15
     326:	ef 90       	pop	r14
     328:	df 90       	pop	r13
     32a:	cf 90       	pop	r12
     32c:	08 95       	ret

0000032e <_ZN7__TWI__12setFrequencyEm>:
Purpose:  Set desired frequency of TWI bus
Input:    Frequency
Return:   None
*********************************************/
void __TWI__::setFrequency(uint32_t frequency)
{
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	9a 01       	movw	r18, r20
     334:	ab 01       	movw	r20, r22
    *this->twbr = (((F_CPU / frequency) - 16) / 2); /* Calculate <TWI> baudrate in terms of frequency */
     336:	fc 01       	movw	r30, r24
     338:	c5 81       	ldd	r28, Z+5	; 0x05
     33a:	d6 81       	ldd	r29, Z+6	; 0x06
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	74 e2       	ldi	r23, 0x24	; 36
     340:	84 ef       	ldi	r24, 0xF4	; 244
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     348:	da 01       	movw	r26, r20
     34a:	c9 01       	movw	r24, r18
     34c:	40 97       	sbiw	r24, 0x10	; 16
     34e:	a1 09       	sbc	r26, r1
     350:	b1 09       	sbc	r27, r1
     352:	b6 95       	lsr	r27
     354:	a7 95       	ror	r26
     356:	97 95       	ror	r25
     358:	87 95       	ror	r24
     35a:	88 83       	st	Y, r24
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <_ZN7__TWI__5beginEv>:
Purpose:  Start TWI bus
Input:    None
Return:   None
*********************************************/
void __TWI__::begin(void)
{
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	ec 01       	movw	r28, r24
{
    if (port == NULL)
        return;
    switch (mode)
    {
        case INPUT : *port &= ~(1 << bit); break;
     368:	87 b1       	in	r24, 0x07	; 7
     36a:	8f 7d       	andi	r24, 0xDF	; 223
     36c:	87 b9       	out	0x07, r24	; 7
     36e:	87 b1       	in	r24, 0x07	; 7
     370:	8f 7e       	andi	r24, 0xEF	; 239
     372:	87 b9       	out	0x07, r24	; 7
    if (port == NULL)
        return;
    switch (mode)
    {
        case LOW   : *port &= ~(1 << bit); break;
        case HIGH  : *port |=  (1 << bit); break;
     374:	88 b1       	in	r24, 0x08	; 8
     376:	80 62       	ori	r24, 0x20	; 32
     378:	88 b9       	out	0x08, r24	; 8
     37a:	88 b1       	in	r24, 0x08	; 8
     37c:	80 61       	ori	r24, 0x10	; 16
     37e:	88 b9       	out	0x08, r24	; 8
    /*
     * External resistors for both SCL & SDA are required
     * Usually 4K7 or 10K are used
     */

    Time.begin();                              /* Start Time implementation  */
     380:	82 e2       	ldi	r24, 0x22	; 34
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN8__Time__5beginEv>
    this->setFrequency(TWI_DEFAULT_FREQUENCY); /* Set default <TWI> frequency */ 
     388:	40 e8       	ldi	r20, 0x80	; 128
     38a:	5a e1       	ldi	r21, 0x1A	; 26
     38c:	66 e0       	ldi	r22, 0x06	; 6
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	ce 01       	movw	r24, r28
     392:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN7__TWI__12setFrequencyEm>
    TWI_BEGIN;                                 /* Send <BEGIN> condition */
     396:	ed 85       	ldd	r30, Y+13	; 0x0d
     398:	fe 85       	ldd	r31, Y+14	; 0x0e
     39a:	84 e4       	ldi	r24, 0x44	; 68
     39c:	80 83       	st	Z, r24
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <_ZN7__TWI__3endEv>:
Input:    None
Return:   None
*********************************************/
void __TWI__::end(void)
{
    TWI_END;                              /* Send <END> condition */
     3a4:	dc 01       	movw	r26, r24
     3a6:	1d 96       	adiw	r26, 0x0d	; 13
     3a8:	ed 91       	ld	r30, X+
     3aa:	fc 91       	ld	r31, X
     3ac:	1e 97       	sbiw	r26, 0x0e	; 14
     3ae:	10 82       	st	Z, r1
{
    if (port == NULL)
        return;
    switch (mode)
    {
        case LOW   : *port &= ~(1 << bit); break;
     3b0:	88 b1       	in	r24, 0x08	; 8
     3b2:	8f 7d       	andi	r24, 0xDF	; 223
     3b4:	88 b9       	out	0x08, r24	; 8
     3b6:	88 b1       	in	r24, 0x08	; 8
     3b8:	8f 7e       	andi	r24, 0xEF	; 239
     3ba:	88 b9       	out	0x08, r24	; 8
     3bc:	08 95       	ret

000003be <_ZN7__TWI__5resetEv>:
Purpose:  Reset TWI bus
Input:    None
Return:   None
*********************************************/
void __TWI__::reset(void)
{
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	ec 01       	movw	r28, r24
    uint8_t twbr = *this->twbr; /* Copy current TWBR */ 
     3c8:	ed 81       	ldd	r30, Y+5	; 0x05
     3ca:	fe 81       	ldd	r31, Y+6	; 0x06
     3cc:	00 81       	ld	r16, Z
    uint8_t twar = *this->twar; /* Copy current TWAR */
     3ce:	e9 85       	ldd	r30, Y+9	; 0x09
     3d0:	fa 85       	ldd	r31, Y+10	; 0x0a
     3d2:	10 81       	ld	r17, Z
    __TWI__::end();             /* Stop TWI bus */
     3d4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN7__TWI__3endEv>
    __TWI__::begin();           /* Start TWI bus */
     3d8:	ce 01       	movw	r24, r28
     3da:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN7__TWI__5beginEv>
    *this->twbr = twbr;         /* Write previous TWBR */ 
     3de:	ed 81       	ldd	r30, Y+5	; 0x05
     3e0:	fe 81       	ldd	r31, Y+6	; 0x06
     3e2:	00 83       	st	Z, r16
    *this->twar = twar;         /* Write previous TWAR */ 
     3e4:	e9 85       	ldd	r30, Y+9	; 0x09
     3e6:	fa 85       	ldd	r31, Y+10	; 0x0a
     3e8:	10 83       	st	Z, r17
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	08 95       	ret

000003f4 <_ZN7__TWI__17beginTransmissionEh>:
Purpose:  Begin transmission of data
Input:    Address where data is transmitted
Return:   Status of transmission
*********************************************/
uint8_t __TWI__::beginTransmission(uint8_t address)
{
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
     406:	f6 2e       	mov	r15, r22
    TWI_START;                                                 /* Send <START> condition */
     408:	ed 85       	ldd	r30, Y+13	; 0x0d
     40a:	fe 85       	ldd	r31, Y+14	; 0x0e
     40c:	84 ea       	ldi	r24, 0xA4	; 164
     40e:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */ 
     410:	82 e2       	ldi	r24, 0x22	; 34
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     418:	68 83       	st	Y, r22
     41a:	79 83       	std	Y+1, r23	; 0x01
     41c:	8a 83       	std	Y+2, r24	; 0x02
     41e:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */ 
     420:	ed 85       	ldd	r30, Y+13	; 0x0d
     422:	fe 85       	ldd	r31, Y+14	; 0x0e
     424:	80 81       	ld	r24, Z
     426:	88 23       	and	r24, r24
     428:	bc f0       	brlt	.+46     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     42a:	82 e2       	ldi	r24, 0x22	; 34
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     432:	08 81       	ld	r16, Y
     434:	19 81       	ldd	r17, Y+1	; 0x01
     436:	2a 81       	ldd	r18, Y+2	; 0x02
     438:	3b 81       	ldd	r19, Y+3	; 0x03
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	80 1b       	sub	r24, r16
     440:	91 0b       	sbc	r25, r17
     442:	a2 0b       	sbc	r26, r18
     444:	b3 0b       	sbc	r27, r19
     446:	03 97       	sbiw	r24, 0x03	; 3
     448:	a1 05       	cpc	r26, r1
     44a:	b1 05       	cpc	r27, r1
     44c:	48 f3       	brcs	.-46     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
        {
            this->reset();                                     /* Reset <TWI> bus */
     44e:	ce 01       	movw	r24, r28
     450:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	56 c0       	rjmp	.+172    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
        }
    }

    address = (address << 1);                                  /* Shift address to left 1 bit */
     458:	ff 0c       	add	r15, r15
    timestamp = Time.millis();                                 /* Get a timestamp */ 
     45a:	82 e2       	ldi	r24, 0x22	; 34
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     462:	68 83       	st	Y, r22
     464:	79 83       	std	Y+1, r23	; 0x01
     466:	8a 83       	std	Y+2, r24	; 0x02
     468:	9b 83       	std	Y+3, r25	; 0x03
    do
    {
        *this->twdr = address;                                 /* Write address into <TWDR> */ 
     46a:	eb 85       	ldd	r30, Y+11	; 0x0b
     46c:	fc 85       	ldd	r31, Y+12	; 0x0c
     46e:	f0 82       	st	Z, r15
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */
     470:	82 e2       	ldi	r24, 0x22	; 34
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     478:	08 81       	ld	r16, Y
     47a:	19 81       	ldd	r17, Y+1	; 0x01
     47c:	2a 81       	ldd	r18, Y+2	; 0x02
     47e:	3b 81       	ldd	r19, Y+3	; 0x03
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	80 1b       	sub	r24, r16
     486:	91 0b       	sbc	r25, r17
     488:	a2 0b       	sbc	r26, r18
     48a:	b3 0b       	sbc	r27, r19
     48c:	03 97       	sbiw	r24, 0x03	; 3
     48e:	a1 05       	cpc	r26, r1
     490:	b1 05       	cpc	r27, r1
     492:	28 f0       	brcs	.+10     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
        {
            this->reset();                                     /* Reset <TWI> bus */
     494:	ce 01       	movw	r24, r28
     496:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     49a:	10 e0       	ldi	r17, 0x00	; 0
     49c:	33 c0       	rjmp	.+102    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
        }
    } while (*this->twcr & (1 << TWWC));                       /* Wait for <TWWC> bit to clear */
     49e:	ed 85       	ldd	r30, Y+13	; 0x0d
     4a0:	fe 85       	ldd	r31, Y+14	; 0x0e
     4a2:	80 81       	ld	r24, Z
        }
    }

    address = (address << 1);                                  /* Shift address to left 1 bit */
    timestamp = Time.millis();                                 /* Get a timestamp */ 
    do
     4a4:	18 2f       	mov	r17, r24
     4a6:	18 70       	andi	r17, 0x08	; 8
     4a8:	83 fd       	sbrc	r24, 3
     4aa:	df cf       	rjmp	.-66     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
            this->reset();                                     /* Reset <TWI> bus */
            return (0);
        }
    } while (*this->twcr & (1 << TWWC));                       /* Wait for <TWWC> bit to clear */

    TWI_WRITE;                                                 /* Send <WRITE> condition */
     4ac:	84 e8       	ldi	r24, 0x84	; 132
     4ae:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     4b0:	82 e2       	ldi	r24, 0x22	; 34
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     4b8:	68 83       	st	Y, r22
     4ba:	79 83       	std	Y+1, r23	; 0x01
     4bc:	8a 83       	std	Y+2, r24	; 0x02
     4be:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     4c0:	ed 85       	ldd	r30, Y+13	; 0x0d
     4c2:	fe 85       	ldd	r31, Y+14	; 0x0e
     4c4:	80 81       	ld	r24, Z
     4c6:	88 23       	and	r24, r24
     4c8:	b4 f0       	brlt	.+44     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     4ca:	82 e2       	ldi	r24, 0x22	; 34
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     4d2:	c8 80       	ld	r12, Y
     4d4:	d9 80       	ldd	r13, Y+1	; 0x01
     4d6:	ea 80       	ldd	r14, Y+2	; 0x02
     4d8:	fb 80       	ldd	r15, Y+3	; 0x03
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	8c 19       	sub	r24, r12
     4e0:	9d 09       	sbc	r25, r13
     4e2:	ae 09       	sbc	r26, r14
     4e4:	bf 09       	sbc	r27, r15
     4e6:	03 97       	sbiw	r24, 0x03	; 3
     4e8:	a1 05       	cpc	r26, r1
     4ea:	b1 05       	cpc	r27, r1
     4ec:	48 f3       	brcs	.-46     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
        {
            this->reset();                                  /* Reset <TWI> bus */
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
        }
    }
    if (TWI_STATUS == TWI_MASTER_SLAVE_ACK) return (1);       /* If slave returned <ACK> */
     4f6:	ef 81       	ldd	r30, Y+7	; 0x07
     4f8:	f8 85       	ldd	r31, Y+8	; 0x08
     4fa:	80 81       	ld	r24, Z
     4fc:	88 7f       	andi	r24, 0xF8	; 248
     4fe:	88 31       	cpi	r24, 0x18	; 24
     500:	09 f4       	brne	.+2      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     502:	11 e0       	ldi	r17, 0x01	; 1
    return (0);
}
     504:	81 2f       	mov	r24, r17
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	08 95       	ret

00000518 <_ZN7__TWI__5writeEh>:
Purpose:  Write data on the TWI bus
Input:    Byte of data to be sent
Return:   Status of transmission
*********************************************/
uint8_t __TWI__::write(uint8_t data)
{
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
    *this->twdr = data;                                        /* Write data into <TWDR> */ 
     522:	eb 85       	ldd	r30, Y+11	; 0x0b
     524:	fc 85       	ldd	r31, Y+12	; 0x0c
     526:	60 83       	st	Z, r22
    TWI_WRITE;                                                 /* Send <WRITE> condition */ 
     528:	ed 85       	ldd	r30, Y+13	; 0x0d
     52a:	fe 85       	ldd	r31, Y+14	; 0x0e
     52c:	84 e8       	ldi	r24, 0x84	; 132
     52e:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     530:	82 e2       	ldi	r24, 0x22	; 34
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     538:	68 83       	st	Y, r22
     53a:	79 83       	std	Y+1, r23	; 0x01
     53c:	8a 83       	std	Y+2, r24	; 0x02
     53e:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     540:	ed 85       	ldd	r30, Y+13	; 0x0d
     542:	fe 85       	ldd	r31, Y+14	; 0x0e
     544:	80 81       	ld	r24, Z
     546:	88 23       	and	r24, r24
     548:	bc f0       	brlt	.+46     	; 0x578 <_ZN7__TWI__5writeEh+0x60>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     54a:	82 e2       	ldi	r24, 0x22	; 34
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     552:	08 81       	ld	r16, Y
     554:	19 81       	ldd	r17, Y+1	; 0x01
     556:	2a 81       	ldd	r18, Y+2	; 0x02
     558:	3b 81       	ldd	r19, Y+3	; 0x03
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	80 1b       	sub	r24, r16
     560:	91 0b       	sbc	r25, r17
     562:	a2 0b       	sbc	r26, r18
     564:	b3 0b       	sbc	r27, r19
     566:	03 97       	sbiw	r24, 0x03	; 3
     568:	a1 05       	cpc	r26, r1
     56a:	b1 05       	cpc	r27, r1
     56c:	48 f3       	brcs	.-46     	; 0x540 <_ZN7__TWI__5writeEh+0x28>
        {
            this->reset();                                     /* Reset <TWI> bus */
     56e:	ce 01       	movw	r24, r28
     570:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <_ZN7__TWI__5writeEh+0x62>
        }
    }
	return (1);
     578:	81 e0       	ldi	r24, 0x01	; 1
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	08 95       	ret

00000584 <_ZN7__TWI__11requestFromEhh>:
Purpose:  Request data from slave
Input:    Address of the slave and amount of bytes supposed to get
Return:   Amount of bytes supposed to get
*********************************************/
uint8_t __TWI__::requestFrom(uint8_t address, uint8_t bytes)
{
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	f6 2e       	mov	r15, r22
    requestedBytes = bytes;                                    /* Keep amount of bytes to be read */
     598:	4c 83       	std	Y+4, r20	; 0x04
    TWI_START;                                                 /* Send <START> condition */
     59a:	ed 85       	ldd	r30, Y+13	; 0x0d
     59c:	fe 85       	ldd	r31, Y+14	; 0x0e
     59e:	84 ea       	ldi	r24, 0xA4	; 164
     5a0:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     5a2:	82 e2       	ldi	r24, 0x22	; 34
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     5aa:	68 83       	st	Y, r22
     5ac:	79 83       	std	Y+1, r23	; 0x01
     5ae:	8a 83       	std	Y+2, r24	; 0x02
     5b0:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     5b2:	ed 85       	ldd	r30, Y+13	; 0x0d
     5b4:	fe 85       	ldd	r31, Y+14	; 0x0e
     5b6:	80 81       	ld	r24, Z
     5b8:	88 23       	and	r24, r24
     5ba:	bc f0       	brlt	.+46     	; 0x5ea <_ZN7__TWI__11requestFromEhh+0x66>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     5bc:	82 e2       	ldi	r24, 0x22	; 34
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     5c4:	08 81       	ld	r16, Y
     5c6:	19 81       	ldd	r17, Y+1	; 0x01
     5c8:	2a 81       	ldd	r18, Y+2	; 0x02
     5ca:	3b 81       	ldd	r19, Y+3	; 0x03
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	80 1b       	sub	r24, r16
     5d2:	91 0b       	sbc	r25, r17
     5d4:	a2 0b       	sbc	r26, r18
     5d6:	b3 0b       	sbc	r27, r19
     5d8:	03 97       	sbiw	r24, 0x03	; 3
     5da:	a1 05       	cpc	r26, r1
     5dc:	b1 05       	cpc	r27, r1
     5de:	48 f3       	brcs	.-46     	; 0x5b2 <_ZN7__TWI__11requestFromEhh+0x2e>
        {
            this->reset();                                     /* Reset <TWI> bus */
     5e0:	ce 01       	movw	r24, r28
     5e2:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	55 c0       	rjmp	.+170    	; 0x694 <_ZN7__TWI__11requestFromEhh+0x110>
        }
    }

    address = ((address << 1) | 1);                            /* Shift address to left 1 bit then set its least significant bit */
     5ea:	8f 2d       	mov	r24, r15
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	28 2f       	mov	r18, r24
     5f4:	21 60       	ori	r18, 0x01	; 1
     5f6:	f2 2e       	mov	r15, r18
    timestamp = Time.millis();                                 /* Get a timestamp */
     5f8:	82 e2       	ldi	r24, 0x22	; 34
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     600:	68 83       	st	Y, r22
     602:	79 83       	std	Y+1, r23	; 0x01
     604:	8a 83       	std	Y+2, r24	; 0x02
     606:	9b 83       	std	Y+3, r25	; 0x03
    do
    {
        TWDR = address;                                        /* Write address into <TWDR> */
     608:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     60c:	82 e2       	ldi	r24, 0x22	; 34
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     614:	08 81       	ld	r16, Y
     616:	19 81       	ldd	r17, Y+1	; 0x01
     618:	2a 81       	ldd	r18, Y+2	; 0x02
     61a:	3b 81       	ldd	r19, Y+3	; 0x03
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	80 1b       	sub	r24, r16
     622:	91 0b       	sbc	r25, r17
     624:	a2 0b       	sbc	r26, r18
     626:	b3 0b       	sbc	r27, r19
     628:	03 97       	sbiw	r24, 0x03	; 3
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	28 f0       	brcs	.+10     	; 0x63a <_ZN7__TWI__11requestFromEhh+0xb6>
        {
            this->reset();                                     /* Reset <TWI> bus */
     630:	ce 01       	movw	r24, r28
     632:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	2d c0       	rjmp	.+90     	; 0x694 <_ZN7__TWI__11requestFromEhh+0x110>
        }
    } while(*this->twcr & (1 << TWWC));                        /* Wait for <TWWC> bit to clear */
     63a:	ed 85       	ldd	r30, Y+13	; 0x0d
     63c:	fe 85       	ldd	r31, Y+14	; 0x0e
     63e:	80 81       	ld	r24, Z
        }
    }

    address = ((address << 1) | 1);                            /* Shift address to left 1 bit then set its least significant bit */
    timestamp = Time.millis();                                 /* Get a timestamp */
    do
     640:	18 2f       	mov	r17, r24
     642:	18 70       	andi	r17, 0x08	; 8
     644:	83 fd       	sbrc	r24, 3
     646:	e0 cf       	rjmp	.-64     	; 0x608 <_ZN7__TWI__11requestFromEhh+0x84>
            this->reset();                                     /* Reset <TWI> bus */
            return (0);
        }
    } while(*this->twcr & (1 << TWWC));                        /* Wait for <TWWC> bit to clear */

    TWI_WRITE;                                                 /* Send <WRITE> condition */
     648:	84 e8       	ldi	r24, 0x84	; 132
     64a:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     64c:	82 e2       	ldi	r24, 0x22	; 34
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     654:	68 83       	st	Y, r22
     656:	79 83       	std	Y+1, r23	; 0x01
     658:	8a 83       	std	Y+2, r24	; 0x02
     65a:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     65c:	ed 85       	ldd	r30, Y+13	; 0x0d
     65e:	fe 85       	ldd	r31, Y+14	; 0x0e
     660:	80 81       	ld	r24, Z
     662:	88 23       	and	r24, r24
     664:	b4 f0       	brlt	.+44     	; 0x692 <_ZN7__TWI__11requestFromEhh+0x10e>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     666:	82 e2       	ldi	r24, 0x22	; 34
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     66e:	c8 80       	ld	r12, Y
     670:	d9 80       	ldd	r13, Y+1	; 0x01
     672:	ea 80       	ldd	r14, Y+2	; 0x02
     674:	fb 80       	ldd	r15, Y+3	; 0x03
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	8c 19       	sub	r24, r12
     67c:	9d 09       	sbc	r25, r13
     67e:	ae 09       	sbc	r26, r14
     680:	bf 09       	sbc	r27, r15
     682:	03 97       	sbiw	r24, 0x03	; 3
     684:	a1 05       	cpc	r26, r1
     686:	b1 05       	cpc	r27, r1
     688:	48 f3       	brcs	.-46     	; 0x65c <_ZN7__TWI__11requestFromEhh+0xd8>
        {
            this->reset();                                     /* Reset <TWI> bus */
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     690:	01 c0       	rjmp	.+2      	; 0x694 <_ZN7__TWI__11requestFromEhh+0x110>
        }
    }
    return (requestedBytes);                                   /* Return amount of bytes meant to be received */
     692:	1c 81       	ldd	r17, Y+4	; 0x04
}
     694:	81 2f       	mov	r24, r17
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <_ZN7__TWI__4readEv>:
Purpose:  Read data from slave
Input:    None
Return:   Data from slave
*********************************************/
uint8_t __TWI__::read(void)
{
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
    (--requestedBytes > 0) ? TWI_READ(1) : ((requestedBytes == 0) ? TWI_READ(0) : 0); /* If amount of bytes are over 0 send <READ> condtion with <ACK> and the last byte send an <NACK> */
     6b2:	8c 81       	ldd	r24, Y+4	; 0x04
     6b4:	81 50       	subi	r24, 0x01	; 1
     6b6:	8c 83       	std	Y+4, r24	; 0x04
     6b8:	88 23       	and	r24, r24
     6ba:	29 f0       	breq	.+10     	; 0x6c6 <_ZN7__TWI__4readEv+0x1e>
     6bc:	ed 85       	ldd	r30, Y+13	; 0x0d
     6be:	fe 85       	ldd	r31, Y+14	; 0x0e
     6c0:	84 ec       	ldi	r24, 0xC4	; 196
     6c2:	80 83       	st	Z, r24
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <_ZN7__TWI__4readEv+0x2a>
     6c6:	81 11       	cpse	r24, r1
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <_ZN7__TWI__4readEv+0x2a>
     6ca:	ed 85       	ldd	r30, Y+13	; 0x0d
     6cc:	fe 85       	ldd	r31, Y+14	; 0x0e
     6ce:	84 e8       	ldi	r24, 0x84	; 132
     6d0:	80 83       	st	Z, r24
    timestamp = Time.millis();                                                        /* Get a timestamp */
     6d2:	82 e2       	ldi	r24, 0x22	; 34
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     6da:	68 83       	st	Y, r22
     6dc:	79 83       	std	Y+1, r23	; 0x01
     6de:	8a 83       	std	Y+2, r24	; 0x02
     6e0:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                                             /* Wait for <TWINT> bit to set */
     6e2:	ed 85       	ldd	r30, Y+13	; 0x0d
     6e4:	fe 85       	ldd	r31, Y+14	; 0x0e
     6e6:	80 81       	ld	r24, Z
     6e8:	88 23       	and	r24, r24
     6ea:	bc f0       	brlt	.+46     	; 0x71a <_ZN7__TWI__4readEv+0x72>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT)                        /* If timeout occured */ 
     6ec:	82 e2       	ldi	r24, 0x22	; 34
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     6f4:	08 81       	ld	r16, Y
     6f6:	19 81       	ldd	r17, Y+1	; 0x01
     6f8:	2a 81       	ldd	r18, Y+2	; 0x02
     6fa:	3b 81       	ldd	r19, Y+3	; 0x03
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	80 1b       	sub	r24, r16
     702:	91 0b       	sbc	r25, r17
     704:	a2 0b       	sbc	r26, r18
     706:	b3 0b       	sbc	r27, r19
     708:	03 97       	sbiw	r24, 0x03	; 3
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	48 f3       	brcs	.-46     	; 0x6e2 <_ZN7__TWI__4readEv+0x3a>
        {
            this->reset();                                                            /* Reset <TWI> bus */
     710:	ce 01       	movw	r24, r28
     712:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return (0);
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	03 c0       	rjmp	.+6      	; 0x720 <_ZN7__TWI__4readEv+0x78>
        }
    }
    return *this->twdr;                                                               /* Return data stored into <TWDR> */
     71a:	eb 85       	ldd	r30, Y+11	; 0x0b
     71c:	fc 85       	ldd	r31, Y+12	; 0x0c
     71e:	80 81       	ld	r24, Z
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <_ZN7__TWI__15endTransmissionEv>:
Purpose:  End transmission of data
Input:    None
Return:   None
*********************************************/
void __TWI__::endTransmission(void)
{
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
    TWI_STOP;                                                /* Send <STOP> condition */
     734:	ed 85       	ldd	r30, Y+13	; 0x0d
     736:	fe 85       	ldd	r31, Y+14	; 0x0e
     738:	84 e9       	ldi	r24, 0x94	; 148
     73a:	80 83       	st	Z, r24
    timestamp = Time.millis();                               /* Get a timestamp  */
     73c:	82 e2       	ldi	r24, 0x22	; 34
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     744:	68 83       	st	Y, r22
     746:	79 83       	std	Y+1, r23	; 0x01
     748:	8a 83       	std	Y+2, r24	; 0x02
     74a:	9b 83       	std	Y+3, r25	; 0x03
    while (*this->twcr & (1 << TWSTO))                       /* Wait for <STOP> bit to clear */
     74c:	ed 85       	ldd	r30, Y+13	; 0x0d
     74e:	fe 85       	ldd	r31, Y+14	; 0x0e
     750:	80 81       	ld	r24, Z
     752:	84 ff       	sbrs	r24, 4
     754:	15 c0       	rjmp	.+42     	; 0x780 <_ZN7__TWI__15endTransmissionEv+0x56>
    {
        if (Time.millis() - timestamp > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     756:	82 e2       	ldi	r24, 0x22	; 34
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN8__Time__6millisEv>
     75e:	08 81       	ld	r16, Y
     760:	19 81       	ldd	r17, Y+1	; 0x01
     762:	2a 81       	ldd	r18, Y+2	; 0x02
     764:	3b 81       	ldd	r19, Y+3	; 0x03
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	80 1b       	sub	r24, r16
     76c:	91 0b       	sbc	r25, r17
     76e:	a2 0b       	sbc	r26, r18
     770:	b3 0b       	sbc	r27, r19
     772:	03 97       	sbiw	r24, 0x03	; 3
     774:	a1 05       	cpc	r26, r1
     776:	b1 05       	cpc	r27, r1
     778:	48 f3       	brcs	.-46     	; 0x74c <_ZN7__TWI__15endTransmissionEv+0x22>
        {
            this->reset();                                   /* Reset <TWI> bus */
     77a:	ce 01       	movw	r24, r28
     77c:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7__TWI__5resetEv>
            return;
        }  
    }
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <_GLOBAL__sub_I__ZN7__TWI__C2EPVhS1_S1_S1_S1_S1_>:
    digitalWrite(&SCL_DOR, SCL_BIT, LOW); /* Set <SCL> Data Output Register as <LOW>*/
    digitalWrite(&SDA_DOR, SDA_BIT, LOW); /* Set <SDA> Data Output Register as <LOW>*/
}

#if defined(__AVR_ATmega328P__)
__TWI__ TWI = __TWI__(&TWBR, &TWSR, &TWAR, &TWDR, &TWCR, &TWAMR);
     78a:	6f ef       	ldi	r22, 0xFF	; 255
     78c:	7f ef       	ldi	r23, 0xFF	; 255
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z41__static_initialization_and_destruction_0ii>
     796:	08 95       	ret

00000798 <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>:
    this->hasBegin = 0;                    /* Allow reinitialization of USART bus */

    #if defined(__AVR_ATmega328P__)
    *this->ucsrb &= ~((1 << RXEN) | (1 << RXCIE) | (1 << TXEN)); /* Disable <RX>, <RX-IRQ>, <TX> */
    #endif
}
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	fc 01       	movw	r30, r24
     7a6:	76 87       	std	Z+14, r23	; 0x0e
     7a8:	65 87       	std	Z+13, r22	; 0x0d
     7aa:	50 8b       	std	Z+16, r21	; 0x10
     7ac:	47 87       	std	Z+15, r20	; 0x0f
     7ae:	32 8b       	std	Z+18, r19	; 0x12
     7b0:	21 8b       	std	Z+17, r18	; 0x11
     7b2:	14 8b       	std	Z+20, r17	; 0x14
     7b4:	03 8b       	std	Z+19, r16	; 0x13
     7b6:	f6 8a       	std	Z+22, r15	; 0x16
     7b8:	e5 8a       	std	Z+21, r14	; 0x15
     7ba:	d0 8e       	std	Z+24, r13	; 0x18
     7bc:	c7 8a       	std	Z+23, r12	; 0x17
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	08 95       	ret

000007cc <_Z41__static_initialization_and_destruction_0ii>:
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	c9 f4       	brne	.+50     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7dc:	6f 3f       	cpi	r22, 0xFF	; 255
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	b1 f4       	brne	.+44     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f6 ec       	ldi	r31, 0xC6	; 198
     7e6:	cf 2e       	mov	r12, r31
     7e8:	d1 2c       	mov	r13, r1
     7ea:	f0 2d       	mov	r31, r0
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f2 ec       	ldi	r31, 0xC2	; 194
     7f0:	ef 2e       	mov	r14, r31
     7f2:	f1 2c       	mov	r15, r1
     7f4:	f0 2d       	mov	r31, r0
     7f6:	01 ec       	ldi	r16, 0xC1	; 193
     7f8:	10 e0       	ldi	r17, 0x00	; 0
     7fa:	20 ec       	ldi	r18, 0xC0	; 192
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	44 ec       	ldi	r20, 0xC4	; 196
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	65 ec       	ldi	r22, 0xC5	; 197
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	82 e4       	ldi	r24, 0x42	; 66
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 cc 03 	call	0x798	; 0x798 <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	08 95       	ret

0000081c <_ZN9__USART__5beginEm>:
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	fc 01       	movw	r30, r24
     82e:	24 85       	ldd	r18, Z+12	; 0x0c
     830:	21 11       	cpse	r18, r1
     832:	6a c0       	rjmp	.+212    	; 0x908 <__stack+0x9>
     834:	ec 01       	movw	r28, r24
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	84 87       	std	Z+12, r24	; 0x0c
     83a:	cb 01       	movw	r24, r22
     83c:	ba 01       	movw	r22, r20
     83e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__floatunsisf>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e8       	ldi	r20, 0x80	; 128
     848:	51 e4       	ldi	r21, 0x41	; 65
     84a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__mulsf3>
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	74 e2       	ldi	r23, 0x24	; 36
     856:	84 e7       	ldi	r24, 0x74	; 116
     858:	9b e4       	ldi	r25, 0x4B	; 75
     85a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__divsf3>
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e8       	ldi	r20, 0x80	; 128
     864:	5f e3       	ldi	r21, 0x3F	; 63
     866:	0e 94 87 06 	call	0xd0e	; 0xd0e <__subsf3>
     86a:	6b 01       	movw	r12, r22
     86c:	7c 01       	movw	r14, r24
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	a9 01       	movw	r20, r18
     874:	0e 94 f4 06 	call	0xde8	; 0xde8 <__cmpsf2>
     878:	88 23       	and	r24, r24
     87a:	6c f4       	brge	.+26     	; 0x896 <_ZN9__USART__5beginEm+0x7a>
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	5f e3       	ldi	r21, 0x3F	; 63
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	0e 94 87 06 	call	0xd0e	; 0xd0e <__subsf3>
     88c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fixsfsi>
     890:	06 2f       	mov	r16, r22
     892:	17 2f       	mov	r17, r23
     894:	0c c0       	rjmp	.+24     	; 0x8ae <_ZN9__USART__5beginEm+0x92>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	5f e3       	ldi	r21, 0x3F	; 63
     89e:	c7 01       	movw	r24, r14
     8a0:	b6 01       	movw	r22, r12
     8a2:	0e 94 88 06 	call	0xd10	; 0xd10 <__addsf3>
     8a6:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fixsfsi>
     8aa:	06 2f       	mov	r16, r22
     8ac:	17 2f       	mov	r17, r23
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <calloc>
     8ba:	99 83       	std	Y+1, r25	; 0x01
     8bc:	88 83       	st	Y, r24
     8be:	61 e0       	ldi	r22, 0x01	; 1
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <calloc>
     8ca:	9f 83       	std	Y+7, r25	; 0x07
     8cc:	8e 83       	std	Y+6, r24	; 0x06
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	9b 83       	std	Y+3, r25	; 0x03
     8d4:	8a 83       	std	Y+2, r24	; 0x02
     8d6:	99 87       	std	Y+9, r25	; 0x09
     8d8:	88 87       	std	Y+8, r24	; 0x08
     8da:	f8 94       	cli
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	88 23       	and	r24, r24
     8e0:	91 f0       	breq	.+36     	; 0x906 <__stack+0x7>
     8e2:	ed 85       	ldd	r30, Y+13	; 0x0d
     8e4:	fe 85       	ldd	r31, Y+14	; 0x0e
     8e6:	10 83       	st	Z, r17
     8e8:	ef 85       	ldd	r30, Y+15	; 0x0f
     8ea:	f8 89       	ldd	r31, Y+16	; 0x10
     8ec:	00 83       	st	Z, r16
     8ee:	ed 89       	ldd	r30, Y+21	; 0x15
     8f0:	fe 89       	ldd	r31, Y+22	; 0x16
     8f2:	80 81       	ld	r24, Z
     8f4:	86 60       	ori	r24, 0x06	; 6
     8f6:	80 83       	st	Z, r24
     8f8:	eb 89       	ldd	r30, Y+19	; 0x13
     8fa:	fc 89       	ldd	r31, Y+20	; 0x14
     8fc:	80 81       	ld	r24, Z
     8fe:	88 69       	ori	r24, 0x98	; 152
     900:	80 83       	st	Z, r24
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	ec cf       	rjmp	.-40     	; 0x8de <_ZN9__USART__5beginEm+0xc2>
     906:	78 94       	sei
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	08 95       	ret

0000091a <_ZN9__USART__5writeEh>:
     91a:	fc 01       	movw	r30, r24
     91c:	82 85       	ldd	r24, Z+10	; 0x0a
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	90 85       	ldd	r25, Z+8	; 0x08
     922:	89 23       	and	r24, r25
     924:	93 85       	ldd	r25, Z+11	; 0x0b
     926:	89 17       	cp	r24, r25
     928:	e9 f3       	breq	.-6      	; 0x924 <_ZN9__USART__5writeEh+0xa>
     92a:	82 87       	std	Z+10, r24	; 0x0a
     92c:	a6 81       	ldd	r26, Z+6	; 0x06
     92e:	b7 81       	ldd	r27, Z+7	; 0x07
     930:	82 85       	ldd	r24, Z+10	; 0x0a
     932:	a8 0f       	add	r26, r24
     934:	b1 1d       	adc	r27, r1
     936:	6c 93       	st	X, r22
     938:	03 88       	ldd	r0, Z+19	; 0x13
     93a:	f4 89       	ldd	r31, Z+20	; 0x14
     93c:	e0 2d       	mov	r30, r0
     93e:	80 81       	ld	r24, Z
     940:	80 62       	ori	r24, 0x20	; 32
     942:	80 83       	st	Z, r24
     944:	08 95       	ret

00000946 <_ZN9__USART__5writeEPKh>:
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	8c 01       	movw	r16, r24
     950:	eb 01       	movw	r28, r22
     952:	68 81       	ld	r22, Y
     954:	66 23       	and	r22, r22
     956:	29 f0       	breq	.+10     	; 0x962 <_ZN9__USART__5writeEPKh+0x1c>
     958:	21 96       	adiw	r28, 0x01	; 1
     95a:	c8 01       	movw	r24, r16
     95c:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN9__USART__5writeEh>
     960:	f8 cf       	rjmp	.-16     	; 0x952 <_ZN9__USART__5writeEPKh+0xc>
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	08 95       	ret

0000096c <_ZN9__USART__6printfEPKcz>:
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	da 95       	dec	r29
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	f8 01       	movw	r30, r16
     990:	9c 01       	movw	r18, r24
     992:	11 92       	st	Z+, r1
     994:	21 50       	subi	r18, 0x01	; 1
     996:	30 40       	sbci	r19, 0x00	; 0
     998:	e1 f7       	brne	.-8      	; 0x992 <_ZN9__USART__6printfEPKcz+0x26>
     99a:	9e 01       	movw	r18, r28
     99c:	25 5f       	subi	r18, 0xF5	; 245
     99e:	3e 4f       	sbci	r19, 0xFE	; 254
     9a0:	c7 5f       	subi	r28, 0xF7	; 247
     9a2:	de 4f       	sbci	r29, 0xFE	; 254
     9a4:	48 81       	ld	r20, Y
     9a6:	59 81       	ldd	r21, Y+1	; 0x01
     9a8:	c9 50       	subi	r28, 0x09	; 9
     9aa:	d1 40       	sbci	r29, 0x01	; 1
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	71 e0       	ldi	r23, 0x01	; 1
     9b0:	c8 01       	movw	r24, r16
     9b2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <vsnprintf>
     9b6:	b8 01       	movw	r22, r16
     9b8:	c9 5f       	subi	r28, 0xF9	; 249
     9ba:	de 4f       	sbci	r29, 0xFE	; 254
     9bc:	88 81       	ld	r24, Y
     9be:	99 81       	ldd	r25, Y+1	; 0x01
     9c0:	c7 50       	subi	r28, 0x07	; 7
     9c2:	d1 40       	sbci	r29, 0x01	; 1
     9c4:	0e 94 a3 04 	call	0x946	; 0x946 <_ZN9__USART__5writeEPKh>
     9c8:	d3 95       	inc	r29
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	08 95       	ret

000009de <_ZN9__USART__6printPEPKc>:
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	8c 01       	movw	r16, r24
     9e8:	eb 01       	movw	r28, r22
     9ea:	fe 01       	movw	r30, r28
     9ec:	84 91       	lpm	r24, Z
     9ee:	88 23       	and	r24, r24
     9f0:	31 f0       	breq	.+12     	; 0x9fe <_ZN9__USART__6printPEPKc+0x20>
     9f2:	21 96       	adiw	r28, 0x01	; 1
     9f4:	64 91       	lpm	r22, Z
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN9__USART__5writeEh>
     9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <_ZN9__USART__6printPEPKc+0xc>
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <__vector_18>:
Input:    Interrupt vector
Return:   None
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_RX_vect)
{
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
Input:    None
Return:   None
***************************************************/
inline void __USART__::rxIRQ(void)
{
    this->USART_RX_HEAD = (this->USART_RX_HEAD + 1) & this->USART_RX_BUFFER_MASK; /* Increase head */
     a1e:	e2 e4       	ldi	r30, 0x42	; 66
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	84 81       	ldd	r24, Z+4	; 0x04
     a24:	92 81       	ldd	r25, Z+2	; 0x02
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	89 23       	and	r24, r25
     a2a:	84 83       	std	Z+4, r24	; 0x04
    this->USART_RX_BUFFER[this->USART_RX_HEAD] = *this->udr;                      /* Read data into buffer */
     a2c:	a0 81       	ld	r26, Z
     a2e:	b1 81       	ldd	r27, Z+1	; 0x01
     a30:	84 81       	ldd	r24, Z+4	; 0x04
     a32:	a8 0f       	add	r26, r24
     a34:	b1 1d       	adc	r27, r1
     a36:	07 88       	ldd	r0, Z+23	; 0x17
     a38:	f0 8d       	ldd	r31, Z+24	; 0x18
     a3a:	e0 2d       	mov	r30, r0
     a3c:	80 81       	ld	r24, Z
     a3e:	8c 93       	st	X, r24
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_RX_vect)
{
    USART.rxIRQ();
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_19>:
Input:    Interrupt vector
Return:   None
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_UDRE_vect)
{
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	2f 93       	push	r18
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	af 93       	push	r26
     a68:	bf 93       	push	r27
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
Input:    None
Return:   None
***************************************************/
inline void __USART__::txIRQ(void)
{
    if (this->USART_TX_HEAD != this->USART_TX_TAIL)                                   /* If data is available into buffer */
     a6e:	e2 e4       	ldi	r30, 0x42	; 66
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	92 85       	ldd	r25, Z+10	; 0x0a
     a74:	83 85       	ldd	r24, Z+11	; 0x0b
     a76:	98 17       	cp	r25, r24
     a78:	81 f0       	breq	.+32     	; 0xa9a <__vector_19+0x44>
    {
        this->USART_TX_TAIL = (this->USART_TX_TAIL + 1) & this->USART_TX_BUFFER_MASK; /* Increase tail */
     a7a:	83 85       	ldd	r24, Z+11	; 0x0b
     a7c:	90 85       	ldd	r25, Z+8	; 0x08
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	89 23       	and	r24, r25
     a82:	83 87       	std	Z+11, r24	; 0x0b
        *this->udr = this->USART_TX_BUFFER[this->USART_TX_TAIL];                      /* Load data from buffer */
     a84:	a7 89       	ldd	r26, Z+23	; 0x17
     a86:	b0 8d       	ldd	r27, Z+24	; 0x18
     a88:	86 81       	ldd	r24, Z+6	; 0x06
     a8a:	97 81       	ldd	r25, Z+7	; 0x07
     a8c:	23 85       	ldd	r18, Z+11	; 0x0b
     a8e:	fc 01       	movw	r30, r24
     a90:	e2 0f       	add	r30, r18
     a92:	f1 1d       	adc	r31, r1
     a94:	80 81       	ld	r24, Z
     a96:	8c 93       	st	X, r24
     a98:	07 c0       	rjmp	.+14     	; 0xaa8 <__vector_19+0x52>
    }
    else                                                                              /* Else there's no data into buffer */
        #if defined(__AVR_ATmega328P__)
        *this->ucsrb &= ~(1 << UDRIE);                                                /* Disable TX interrupt */
     a9a:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <USART+0x13>
     a9e:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <USART+0x14>
     aa2:	80 81       	ld	r24, Z
     aa4:	8f 7d       	andi	r24, 0xDF	; 223
     aa6:	80 83       	st	Z, r24
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_UDRE_vect)
{
    USART.txIRQ();
}
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	2f 91       	pop	r18
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <_GLOBAL__sub_I__ZN9__USART__C2EPVhS1_S1_S1_S1_S1_>:
     ac0:	6f ef       	ldi	r22, 0xFF	; 255
     ac2:	7f ef       	ldi	r23, 0xFF	; 255
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_Z41__static_initialization_and_destruction_0ii>
     acc:	08 95       	ret

00000ace <_GLOBAL__sub_D__ZN9__USART__C2EPVhS1_S1_S1_S1_S1_>:
     ace:	6f ef       	ldi	r22, 0xFF	; 255
     ad0:	7f ef       	ldi	r23, 0xFF	; 255
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_Z41__static_initialization_and_destruction_0ii>
     ada:	08 95       	ret

00000adc <_ZN7MPU6050C1EP7__TWI__h>:
    this->twi->beginTransmission(address);                                 // Begin transmission to address
    this->twi->write(PMGMR1);                                              // Access power management register 1
    if (this->twi->requestFrom(address, (uint8_t)1) != (uint8_t)1) return; // Request data and check if data can be received
    this->twi->write((uint8_t)((uint8_t)twi->read() & ~(1 << TOFF)));      /* Clear <TOFF> bit in <PMGMR1> */
    this->twi->endTransmission();                                          // End transmission
}
     adc:	fc 01       	movw	r30, r24
     ade:	71 83       	std	Z+1, r23	; 0x01
     ae0:	60 83       	st	Z, r22
     ae2:	42 83       	std	Z+2, r20	; 0x02
     ae4:	08 95       	ret

00000ae6 <_ZN7MPU605011isConnectedEv>:
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ec 01       	movw	r28, r24
     aee:	6a 81       	ldd	r22, Y+2	; 0x02
     af0:	88 81       	ld	r24, Y
     af2:	99 81       	ldd	r25, Y+1	; 0x01
     af4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN7__TWI__17beginTransmissionEh>
     af8:	18 2f       	mov	r17, r24
     afa:	88 81       	ld	r24, Y
     afc:	99 81       	ldd	r25, Y+1	; 0x01
     afe:	0e 94 95 03 	call	0x72a	; 0x72a <_ZN7__TWI__15endTransmissionEv>
     b02:	81 2f       	mov	r24, r17
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	08 95       	ret

00000b0c <_ZN7MPU605017readAccelerometerEPiS0_S0_>:
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	5b 01       	movw	r10, r22
     b24:	6a 01       	movw	r12, r20
     b26:	79 01       	movw	r14, r18
     b28:	6a 81       	ldd	r22, Y+2	; 0x02
     b2a:	88 81       	ld	r24, Y
     b2c:	99 81       	ldd	r25, Y+1	; 0x01
     b2e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN7__TWI__17beginTransmissionEh>
     b32:	6b e3       	ldi	r22, 0x3B	; 59
     b34:	88 81       	ld	r24, Y
     b36:	99 81       	ldd	r25, Y+1	; 0x01
     b38:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN7__TWI__5writeEh>
     b3c:	46 e0       	ldi	r20, 0x06	; 6
     b3e:	6a 81       	ldd	r22, Y+2	; 0x02
     b40:	88 81       	ld	r24, Y
     b42:	99 81       	ldd	r25, Y+1	; 0x01
     b44:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN7__TWI__11requestFromEhh>
     b48:	86 30       	cpi	r24, 0x06	; 6
     b4a:	a1 f5       	brne	.+104    	; 0xbb4 <_ZN7MPU605017readAccelerometerEPiS0_S0_+0xa8>
     b4c:	88 81       	ld	r24, Y
     b4e:	99 81       	ldd	r25, Y+1	; 0x01
     b50:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN7__TWI__4readEv>
     b54:	08 2f       	mov	r16, r24
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	10 2f       	mov	r17, r16
     b5a:	00 27       	eor	r16, r16
     b5c:	88 81       	ld	r24, Y
     b5e:	99 81       	ldd	r25, Y+1	; 0x01
     b60:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN7__TWI__4readEv>
     b64:	08 2b       	or	r16, r24
     b66:	f5 01       	movw	r30, r10
     b68:	11 83       	std	Z+1, r17	; 0x01
     b6a:	00 83       	st	Z, r16
     b6c:	88 81       	ld	r24, Y
     b6e:	99 81       	ldd	r25, Y+1	; 0x01
     b70:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN7__TWI__4readEv>
     b74:	08 2f       	mov	r16, r24
     b76:	10 e0       	ldi	r17, 0x00	; 0
     b78:	10 2f       	mov	r17, r16
     b7a:	00 27       	eor	r16, r16
     b7c:	88 81       	ld	r24, Y
     b7e:	99 81       	ldd	r25, Y+1	; 0x01
     b80:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN7__TWI__4readEv>
     b84:	08 2b       	or	r16, r24
     b86:	f6 01       	movw	r30, r12
     b88:	11 83       	std	Z+1, r17	; 0x01
     b8a:	00 83       	st	Z, r16
     b8c:	88 81       	ld	r24, Y
     b8e:	99 81       	ldd	r25, Y+1	; 0x01
     b90:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN7__TWI__4readEv>
     b94:	08 2f       	mov	r16, r24
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	10 2f       	mov	r17, r16
     b9a:	00 27       	eor	r16, r16
     b9c:	88 81       	ld	r24, Y
     b9e:	99 81       	ldd	r25, Y+1	; 0x01
     ba0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN7__TWI__4readEv>
     ba4:	08 2b       	or	r16, r24
     ba6:	f7 01       	movw	r30, r14
     ba8:	11 83       	std	Z+1, r17	; 0x01
     baa:	00 83       	st	Z, r16
     bac:	88 81       	ld	r24, Y
     bae:	99 81       	ldd	r25, Y+1	; 0x01
     bb0:	0e 94 95 03 	call	0x72a	; 0x72a <_ZN7__TWI__15endTransmissionEv>
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	08 95       	ret

00000bca <_ZN7MPU605024disableTemperatureSensorEv>:

void MPU6050::disableTemperatureSensor(void)
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
    this->twi->beginTransmission(address);                                 // Begin transmission to address
     bd0:	6a 81       	ldd	r22, Y+2	; 0x02
     bd2:	88 81       	ld	r24, Y
     bd4:	99 81       	ldd	r25, Y+1	; 0x01
     bd6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN7__TWI__17beginTransmissionEh>
    this->twi->write(PMGMR1);                                              // Access power management register 1
     bda:	6b e6       	ldi	r22, 0x6B	; 107
     bdc:	88 81       	ld	r24, Y
     bde:	99 81       	ldd	r25, Y+1	; 0x01
     be0:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN7__TWI__5writeEh>
    if (this->twi->requestFrom(address, (uint8_t)1) != (uint8_t)1) return; // Request data and check if data can be received
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	6a 81       	ldd	r22, Y+2	; 0x02
     be8:	88 81       	ld	r24, Y
     bea:	99 81       	ldd	r25, Y+1	; 0x01
     bec:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN7__TWI__11requestFromEhh>
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	71 f4       	brne	.+28     	; 0xc10 <_ZN7MPU605024disableTemperatureSensorEv+0x46>
    this->twi->write((uint8_t)((uint8_t)twi->read() | (1 << TOFF)));       /* Set <TOFF> bit in <PMGMR1> */
     bf4:	88 81       	ld	r24, Y
     bf6:	99 81       	ldd	r25, Y+1	; 0x01
     bf8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN7__TWI__4readEv>
     bfc:	68 2f       	mov	r22, r24
     bfe:	68 60       	ori	r22, 0x08	; 8
     c00:	88 81       	ld	r24, Y
     c02:	99 81       	ldd	r25, Y+1	; 0x01
     c04:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN7__TWI__5writeEh>
    this->twi->endTransmission();                                          // End transmission
     c08:	88 81       	ld	r24, Y
     c0a:	99 81       	ldd	r25, Y+1	; 0x01
     c0c:	0e 94 95 03 	call	0x72a	; 0x72a <_ZN7__TWI__15endTransmissionEv>
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <_ZN7MPU60505beginEv>:
Purpose:  Begin communication with MPU6050
Input:    None
Return:   Status of MPU6050 communication
*********************************************/
uint8_t MPU6050::begin(void)
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
    twi->begin();
     c1c:	88 81       	ld	r24, Y
     c1e:	99 81       	ldd	r25, Y+1	; 0x01
     c20:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN7__TWI__5beginEv>
    if (!this->isConnected()) return (0);
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN7MPU605011isConnectedEv>
     c2a:	88 23       	and	r24, r24
     c2c:	21 f0       	breq	.+8      	; 0xc36 <_ZN7MPU60505beginEv+0x20>
    this->disableTemperatureSensor();
     c2e:	ce 01       	movw	r24, r28
     c30:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN7MPU605024disableTemperatureSensorEv>
    return (1);
     c34:	81 e0       	ldi	r24, 0x01	; 1
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <_Z41__static_initialization_and_destruction_0ii>:
        int16_t x, y, z;
        mpu.readAccelerometer(&x, &y, &z);
        USART.printf("Ax: %hd, Ay: %hd, Ay: %hd\n", x, y, z);
        Time.delayMillis(1000);
    }
}
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	51 f4       	brne	.+20     	; 0xc54 <_Z41__static_initialization_and_destruction_0ii+0x18>
     c40:	6f 3f       	cpi	r22, 0xFF	; 255
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	39 f4       	brne	.+14     	; 0xc54 <_Z41__static_initialization_and_destruction_0ii+0x18>
 */ 

#include "USART\USART.h"
#include "MPU6050\MPU6050.h"

MPU6050 mpu(&TWI, 0x68);
     c46:	48 e6       	ldi	r20, 0x68	; 104
     c48:	61 e3       	ldi	r22, 0x31	; 49
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	8b e5       	ldi	r24, 0x5B	; 91
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN7MPU6050C1EP7__TWI__h>
     c54:	08 95       	ret

00000c56 <main>:

int main(void)
{
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <main+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <main+0x8>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <main+0xa>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
    USART.begin(115200);
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	52 ec       	ldi	r21, 0xC2	; 194
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	82 e4       	ldi	r24, 0x42	; 66
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN9__USART__5beginEm>
    USART.printP(PSTR("MPU6050 Raw Values Example\n"));
     c74:	61 e9       	ldi	r22, 0x91	; 145
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	82 e4       	ldi	r24, 0x42	; 66
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 ef 04 	call	0x9de	; 0x9de <_ZN9__USART__6printPEPKc>
    USART.printP((mpu.begin()) ? PSTR("MPU6050 started\n") : PSTR("MPU6050 didn't started\n"));
     c80:	8b e5       	ldi	r24, 0x5B	; 91
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN7MPU60505beginEv>
     c88:	88 23       	and	r24, r24
     c8a:	19 f0       	breq	.+6      	; 0xc92 <main+0x3c>
     c8c:	60 e8       	ldi	r22, 0x80	; 128
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <main+0x40>
     c92:	68 e6       	ldi	r22, 0x68	; 104
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	82 e4       	ldi	r24, 0x42	; 66
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0e 94 ef 04 	call	0x9de	; 0x9de <_ZN9__USART__6printPEPKc>
    while (1) 
    {
        int16_t x, y, z;
        mpu.readAccelerometer(&x, &y, &z);
     c9e:	9e 01       	movw	r18, r28
     ca0:	2f 5f       	subi	r18, 0xFF	; 255
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
     ca4:	ae 01       	movw	r20, r28
     ca6:	4d 5f       	subi	r20, 0xFD	; 253
     ca8:	5f 4f       	sbci	r21, 0xFF	; 255
     caa:	be 01       	movw	r22, r28
     cac:	6b 5f       	subi	r22, 0xFB	; 251
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	8b e5       	ldi	r24, 0x5B	; 91
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 86 05 	call	0xb0c	; 0xb0c <_ZN7MPU605017readAccelerometerEPiS0_S0_>
        USART.printf("Ax: %hd, Ay: %hd, Ay: %hd\n", x, y, z);
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	8f 93       	push	r24
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	8f 93       	push	r24
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	8f 93       	push	r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	8f 93       	push	r24
     cc8:	8e 81       	ldd	r24, Y+6	; 0x06
     cca:	8f 93       	push	r24
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	8f 93       	push	r24
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	82 e4       	ldi	r24, 0x42	; 66
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN9__USART__6printfEPKcz>
        Time.delayMillis(1000);
     ce4:	48 ee       	ldi	r20, 0xE8	; 232
     ce6:	53 e0       	ldi	r21, 0x03	; 3
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	82 e2       	ldi	r24, 0x22	; 34
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN8__Time__11delayMillisEm>
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	cf cf       	rjmp	.-98     	; 0xc9e <main+0x48>

00000d00 <_GLOBAL__sub_I_mpu>:
    }
}
     d00:	6f ef       	ldi	r22, 0xFF	; 255
     d02:	7f ef       	ldi	r23, 0xFF	; 255
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_Z41__static_initialization_and_destruction_0ii>
     d0c:	08 95       	ret

00000d0e <__subsf3>:
     d0e:	50 58       	subi	r21, 0x80	; 128

00000d10 <__addsf3>:
     d10:	bb 27       	eor	r27, r27
     d12:	aa 27       	eor	r26, r26
     d14:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__addsf3x>
     d18:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__fp_round>
     d1c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fp_pscA>
     d20:	38 f0       	brcs	.+14     	; 0xd30 <__addsf3+0x20>
     d22:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscB>
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__addsf3+0x20>
     d28:	39 f4       	brne	.+14     	; 0xd38 <__addsf3+0x28>
     d2a:	9f 3f       	cpi	r25, 0xFF	; 255
     d2c:	19 f4       	brne	.+6      	; 0xd34 <__addsf3+0x24>
     d2e:	26 f4       	brtc	.+8      	; 0xd38 <__addsf3+0x28>
     d30:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_nan>
     d34:	0e f4       	brtc	.+2      	; 0xd38 <__addsf3+0x28>
     d36:	e0 95       	com	r30
     d38:	e7 fb       	bst	r30, 7
     d3a:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_inf>

00000d3e <__addsf3x>:
     d3e:	e9 2f       	mov	r30, r25
     d40:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fp_split3>
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__addsf3+0xc>
     d46:	ba 17       	cp	r27, r26
     d48:	62 07       	cpc	r22, r18
     d4a:	73 07       	cpc	r23, r19
     d4c:	84 07       	cpc	r24, r20
     d4e:	95 07       	cpc	r25, r21
     d50:	20 f0       	brcs	.+8      	; 0xd5a <__addsf3x+0x1c>
     d52:	79 f4       	brne	.+30     	; 0xd72 <__addsf3x+0x34>
     d54:	a6 f5       	brtc	.+104    	; 0xdbe <__addsf3x+0x80>
     d56:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_zero>
     d5a:	0e f4       	brtc	.+2      	; 0xd5e <__addsf3x+0x20>
     d5c:	e0 95       	com	r30
     d5e:	0b 2e       	mov	r0, r27
     d60:	ba 2f       	mov	r27, r26
     d62:	a0 2d       	mov	r26, r0
     d64:	0b 01       	movw	r0, r22
     d66:	b9 01       	movw	r22, r18
     d68:	90 01       	movw	r18, r0
     d6a:	0c 01       	movw	r0, r24
     d6c:	ca 01       	movw	r24, r20
     d6e:	a0 01       	movw	r20, r0
     d70:	11 24       	eor	r1, r1
     d72:	ff 27       	eor	r31, r31
     d74:	59 1b       	sub	r21, r25
     d76:	99 f0       	breq	.+38     	; 0xd9e <__addsf3x+0x60>
     d78:	59 3f       	cpi	r21, 0xF9	; 249
     d7a:	50 f4       	brcc	.+20     	; 0xd90 <__addsf3x+0x52>
     d7c:	50 3e       	cpi	r21, 0xE0	; 224
     d7e:	68 f1       	brcs	.+90     	; 0xdda <__addsf3x+0x9c>
     d80:	1a 16       	cp	r1, r26
     d82:	f0 40       	sbci	r31, 0x00	; 0
     d84:	a2 2f       	mov	r26, r18
     d86:	23 2f       	mov	r18, r19
     d88:	34 2f       	mov	r19, r20
     d8a:	44 27       	eor	r20, r20
     d8c:	58 5f       	subi	r21, 0xF8	; 248
     d8e:	f3 cf       	rjmp	.-26     	; 0xd76 <__addsf3x+0x38>
     d90:	46 95       	lsr	r20
     d92:	37 95       	ror	r19
     d94:	27 95       	ror	r18
     d96:	a7 95       	ror	r26
     d98:	f0 40       	sbci	r31, 0x00	; 0
     d9a:	53 95       	inc	r21
     d9c:	c9 f7       	brne	.-14     	; 0xd90 <__addsf3x+0x52>
     d9e:	7e f4       	brtc	.+30     	; 0xdbe <__addsf3x+0x80>
     da0:	1f 16       	cp	r1, r31
     da2:	ba 0b       	sbc	r27, r26
     da4:	62 0b       	sbc	r22, r18
     da6:	73 0b       	sbc	r23, r19
     da8:	84 0b       	sbc	r24, r20
     daa:	ba f0       	brmi	.+46     	; 0xdda <__addsf3x+0x9c>
     dac:	91 50       	subi	r25, 0x01	; 1
     dae:	a1 f0       	breq	.+40     	; 0xdd8 <__addsf3x+0x9a>
     db0:	ff 0f       	add	r31, r31
     db2:	bb 1f       	adc	r27, r27
     db4:	66 1f       	adc	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	c2 f7       	brpl	.-16     	; 0xdac <__addsf3x+0x6e>
     dbc:	0e c0       	rjmp	.+28     	; 0xdda <__addsf3x+0x9c>
     dbe:	ba 0f       	add	r27, r26
     dc0:	62 1f       	adc	r22, r18
     dc2:	73 1f       	adc	r23, r19
     dc4:	84 1f       	adc	r24, r20
     dc6:	48 f4       	brcc	.+18     	; 0xdda <__addsf3x+0x9c>
     dc8:	87 95       	ror	r24
     dca:	77 95       	ror	r23
     dcc:	67 95       	ror	r22
     dce:	b7 95       	ror	r27
     dd0:	f7 95       	ror	r31
     dd2:	9e 3f       	cpi	r25, 0xFE	; 254
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <__addsf3x+0x9a>
     dd6:	b0 cf       	rjmp	.-160    	; 0xd38 <__addsf3+0x28>
     dd8:	93 95       	inc	r25
     dda:	88 0f       	add	r24, r24
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <__addsf3x+0xa2>
     dde:	99 27       	eor	r25, r25
     de0:	ee 0f       	add	r30, r30
     de2:	97 95       	ror	r25
     de4:	87 95       	ror	r24
     de6:	08 95       	ret

00000de8 <__cmpsf2>:
     de8:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_cmp>
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <__cmpsf2+0x8>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	08 95       	ret

00000df2 <__divsf3>:
     df2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__divsf3x>
     df6:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__fp_round>
     dfa:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscB>
     dfe:	58 f0       	brcs	.+22     	; 0xe16 <__divsf3+0x24>
     e00:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fp_pscA>
     e04:	40 f0       	brcs	.+16     	; 0xe16 <__divsf3+0x24>
     e06:	29 f4       	brne	.+10     	; 0xe12 <__divsf3+0x20>
     e08:	5f 3f       	cpi	r21, 0xFF	; 255
     e0a:	29 f0       	breq	.+10     	; 0xe16 <__divsf3+0x24>
     e0c:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_inf>
     e10:	51 11       	cpse	r21, r1
     e12:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_szero>
     e16:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_nan>

00000e1a <__divsf3x>:
     e1a:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fp_split3>
     e1e:	68 f3       	brcs	.-38     	; 0xdfa <__divsf3+0x8>

00000e20 <__divsf3_pse>:
     e20:	99 23       	and	r25, r25
     e22:	b1 f3       	breq	.-20     	; 0xe10 <__divsf3+0x1e>
     e24:	55 23       	and	r21, r21
     e26:	91 f3       	breq	.-28     	; 0xe0c <__divsf3+0x1a>
     e28:	95 1b       	sub	r25, r21
     e2a:	55 0b       	sbc	r21, r21
     e2c:	bb 27       	eor	r27, r27
     e2e:	aa 27       	eor	r26, r26
     e30:	62 17       	cp	r22, r18
     e32:	73 07       	cpc	r23, r19
     e34:	84 07       	cpc	r24, r20
     e36:	38 f0       	brcs	.+14     	; 0xe46 <__divsf3_pse+0x26>
     e38:	9f 5f       	subi	r25, 0xFF	; 255
     e3a:	5f 4f       	sbci	r21, 0xFF	; 255
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	44 1f       	adc	r20, r20
     e42:	aa 1f       	adc	r26, r26
     e44:	a9 f3       	breq	.-22     	; 0xe30 <__divsf3_pse+0x10>
     e46:	35 d0       	rcall	.+106    	; 0xeb2 <__divsf3_pse+0x92>
     e48:	0e 2e       	mov	r0, r30
     e4a:	3a f0       	brmi	.+14     	; 0xe5a <__divsf3_pse+0x3a>
     e4c:	e0 e8       	ldi	r30, 0x80	; 128
     e4e:	32 d0       	rcall	.+100    	; 0xeb4 <__divsf3_pse+0x94>
     e50:	91 50       	subi	r25, 0x01	; 1
     e52:	50 40       	sbci	r21, 0x00	; 0
     e54:	e6 95       	lsr	r30
     e56:	00 1c       	adc	r0, r0
     e58:	ca f7       	brpl	.-14     	; 0xe4c <__divsf3_pse+0x2c>
     e5a:	2b d0       	rcall	.+86     	; 0xeb2 <__divsf3_pse+0x92>
     e5c:	fe 2f       	mov	r31, r30
     e5e:	29 d0       	rcall	.+82     	; 0xeb2 <__divsf3_pse+0x92>
     e60:	66 0f       	add	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	88 1f       	adc	r24, r24
     e66:	bb 1f       	adc	r27, r27
     e68:	26 17       	cp	r18, r22
     e6a:	37 07       	cpc	r19, r23
     e6c:	48 07       	cpc	r20, r24
     e6e:	ab 07       	cpc	r26, r27
     e70:	b0 e8       	ldi	r27, 0x80	; 128
     e72:	09 f0       	breq	.+2      	; 0xe76 <__divsf3_pse+0x56>
     e74:	bb 0b       	sbc	r27, r27
     e76:	80 2d       	mov	r24, r0
     e78:	bf 01       	movw	r22, r30
     e7a:	ff 27       	eor	r31, r31
     e7c:	93 58       	subi	r25, 0x83	; 131
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	3a f0       	brmi	.+14     	; 0xe90 <__divsf3_pse+0x70>
     e82:	9e 3f       	cpi	r25, 0xFE	; 254
     e84:	51 05       	cpc	r21, r1
     e86:	78 f0       	brcs	.+30     	; 0xea6 <__divsf3_pse+0x86>
     e88:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_inf>
     e8c:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_szero>
     e90:	5f 3f       	cpi	r21, 0xFF	; 255
     e92:	e4 f3       	brlt	.-8      	; 0xe8c <__divsf3_pse+0x6c>
     e94:	98 3e       	cpi	r25, 0xE8	; 232
     e96:	d4 f3       	brlt	.-12     	; 0xe8c <__divsf3_pse+0x6c>
     e98:	86 95       	lsr	r24
     e9a:	77 95       	ror	r23
     e9c:	67 95       	ror	r22
     e9e:	b7 95       	ror	r27
     ea0:	f7 95       	ror	r31
     ea2:	9f 5f       	subi	r25, 0xFF	; 255
     ea4:	c9 f7       	brne	.-14     	; 0xe98 <__divsf3_pse+0x78>
     ea6:	88 0f       	add	r24, r24
     ea8:	91 1d       	adc	r25, r1
     eaa:	96 95       	lsr	r25
     eac:	87 95       	ror	r24
     eae:	97 f9       	bld	r25, 7
     eb0:	08 95       	ret
     eb2:	e1 e0       	ldi	r30, 0x01	; 1
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	bb 1f       	adc	r27, r27
     ebc:	62 17       	cp	r22, r18
     ebe:	73 07       	cpc	r23, r19
     ec0:	84 07       	cpc	r24, r20
     ec2:	ba 07       	cpc	r27, r26
     ec4:	20 f0       	brcs	.+8      	; 0xece <__divsf3_pse+0xae>
     ec6:	62 1b       	sub	r22, r18
     ec8:	73 0b       	sbc	r23, r19
     eca:	84 0b       	sbc	r24, r20
     ecc:	ba 0b       	sbc	r27, r26
     ece:	ee 1f       	adc	r30, r30
     ed0:	88 f7       	brcc	.-30     	; 0xeb4 <__divsf3_pse+0x94>
     ed2:	e0 95       	com	r30
     ed4:	08 95       	ret

00000ed6 <__fixsfsi>:
     ed6:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixunssfsi>
     eda:	68 94       	set
     edc:	b1 11       	cpse	r27, r1
     ede:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_szero>
     ee2:	08 95       	ret

00000ee4 <__fixunssfsi>:
     ee4:	0e 94 32 08 	call	0x1064	; 0x1064 <__fp_splitA>
     ee8:	88 f0       	brcs	.+34     	; 0xf0c <__fixunssfsi+0x28>
     eea:	9f 57       	subi	r25, 0x7F	; 127
     eec:	98 f0       	brcs	.+38     	; 0xf14 <__fixunssfsi+0x30>
     eee:	b9 2f       	mov	r27, r25
     ef0:	99 27       	eor	r25, r25
     ef2:	b7 51       	subi	r27, 0x17	; 23
     ef4:	b0 f0       	brcs	.+44     	; 0xf22 <__fixunssfsi+0x3e>
     ef6:	e1 f0       	breq	.+56     	; 0xf30 <__fixunssfsi+0x4c>
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	1a f0       	brmi	.+6      	; 0xf08 <__fixunssfsi+0x24>
     f02:	ba 95       	dec	r27
     f04:	c9 f7       	brne	.-14     	; 0xef8 <__fixunssfsi+0x14>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <__fixunssfsi+0x4c>
     f08:	b1 30       	cpi	r27, 0x01	; 1
     f0a:	91 f0       	breq	.+36     	; 0xf30 <__fixunssfsi+0x4c>
     f0c:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fp_zero>
     f10:	b1 e0       	ldi	r27, 0x01	; 1
     f12:	08 95       	ret
     f14:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_zero>
     f18:	67 2f       	mov	r22, r23
     f1a:	78 2f       	mov	r23, r24
     f1c:	88 27       	eor	r24, r24
     f1e:	b8 5f       	subi	r27, 0xF8	; 248
     f20:	39 f0       	breq	.+14     	; 0xf30 <__fixunssfsi+0x4c>
     f22:	b9 3f       	cpi	r27, 0xF9	; 249
     f24:	cc f3       	brlt	.-14     	; 0xf18 <__fixunssfsi+0x34>
     f26:	86 95       	lsr	r24
     f28:	77 95       	ror	r23
     f2a:	67 95       	ror	r22
     f2c:	b3 95       	inc	r27
     f2e:	d9 f7       	brne	.-10     	; 0xf26 <__fixunssfsi+0x42>
     f30:	3e f4       	brtc	.+14     	; 0xf40 <__fixunssfsi+0x5c>
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	70 95       	com	r23
     f38:	61 95       	neg	r22
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <__floatunsisf>:
     f42:	e8 94       	clt
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <__floatsisf+0x12>

00000f46 <__floatsisf>:
     f46:	97 fb       	bst	r25, 7
     f48:	3e f4       	brtc	.+14     	; 0xf58 <__floatsisf+0x12>
     f4a:	90 95       	com	r25
     f4c:	80 95       	com	r24
     f4e:	70 95       	com	r23
     f50:	61 95       	neg	r22
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8f 4f       	sbci	r24, 0xFF	; 255
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	99 23       	and	r25, r25
     f5a:	a9 f0       	breq	.+42     	; 0xf86 <__floatsisf+0x40>
     f5c:	f9 2f       	mov	r31, r25
     f5e:	96 e9       	ldi	r25, 0x96	; 150
     f60:	bb 27       	eor	r27, r27
     f62:	93 95       	inc	r25
     f64:	f6 95       	lsr	r31
     f66:	87 95       	ror	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	f1 11       	cpse	r31, r1
     f70:	f8 cf       	rjmp	.-16     	; 0xf62 <__floatsisf+0x1c>
     f72:	fa f4       	brpl	.+62     	; 0xfb2 <__floatsisf+0x6c>
     f74:	bb 0f       	add	r27, r27
     f76:	11 f4       	brne	.+4      	; 0xf7c <__floatsisf+0x36>
     f78:	60 ff       	sbrs	r22, 0
     f7a:	1b c0       	rjmp	.+54     	; 0xfb2 <__floatsisf+0x6c>
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	16 c0       	rjmp	.+44     	; 0xfb2 <__floatsisf+0x6c>
     f86:	88 23       	and	r24, r24
     f88:	11 f0       	breq	.+4      	; 0xf8e <__floatsisf+0x48>
     f8a:	96 e9       	ldi	r25, 0x96	; 150
     f8c:	11 c0       	rjmp	.+34     	; 0xfb0 <__floatsisf+0x6a>
     f8e:	77 23       	and	r23, r23
     f90:	21 f0       	breq	.+8      	; 0xf9a <__floatsisf+0x54>
     f92:	9e e8       	ldi	r25, 0x8E	; 142
     f94:	87 2f       	mov	r24, r23
     f96:	76 2f       	mov	r23, r22
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__floatsisf+0x5e>
     f9a:	66 23       	and	r22, r22
     f9c:	71 f0       	breq	.+28     	; 0xfba <__floatsisf+0x74>
     f9e:	96 e8       	ldi	r25, 0x86	; 134
     fa0:	86 2f       	mov	r24, r22
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	2a f0       	brmi	.+10     	; 0xfb2 <__floatsisf+0x6c>
     fa8:	9a 95       	dec	r25
     faa:	66 0f       	add	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	da f7       	brpl	.-10     	; 0xfa8 <__floatsisf+0x62>
     fb2:	88 0f       	add	r24, r24
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__fp_cmp>:
     fbc:	99 0f       	add	r25, r25
     fbe:	00 08       	sbc	r0, r0
     fc0:	55 0f       	add	r21, r21
     fc2:	aa 0b       	sbc	r26, r26
     fc4:	e0 e8       	ldi	r30, 0x80	; 128
     fc6:	fe ef       	ldi	r31, 0xFE	; 254
     fc8:	16 16       	cp	r1, r22
     fca:	17 06       	cpc	r1, r23
     fcc:	e8 07       	cpc	r30, r24
     fce:	f9 07       	cpc	r31, r25
     fd0:	c0 f0       	brcs	.+48     	; 0x1002 <__fp_cmp+0x46>
     fd2:	12 16       	cp	r1, r18
     fd4:	13 06       	cpc	r1, r19
     fd6:	e4 07       	cpc	r30, r20
     fd8:	f5 07       	cpc	r31, r21
     fda:	98 f0       	brcs	.+38     	; 0x1002 <__fp_cmp+0x46>
     fdc:	62 1b       	sub	r22, r18
     fde:	73 0b       	sbc	r23, r19
     fe0:	84 0b       	sbc	r24, r20
     fe2:	95 0b       	sbc	r25, r21
     fe4:	39 f4       	brne	.+14     	; 0xff4 <__fp_cmp+0x38>
     fe6:	0a 26       	eor	r0, r26
     fe8:	61 f0       	breq	.+24     	; 0x1002 <__fp_cmp+0x46>
     fea:	23 2b       	or	r18, r19
     fec:	24 2b       	or	r18, r20
     fee:	25 2b       	or	r18, r21
     ff0:	21 f4       	brne	.+8      	; 0xffa <__fp_cmp+0x3e>
     ff2:	08 95       	ret
     ff4:	0a 26       	eor	r0, r26
     ff6:	09 f4       	brne	.+2      	; 0xffa <__fp_cmp+0x3e>
     ff8:	a1 40       	sbci	r26, 0x01	; 1
     ffa:	a6 95       	lsr	r26
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	81 1d       	adc	r24, r1
    1000:	81 1d       	adc	r24, r1
    1002:	08 95       	ret

00001004 <__fp_inf>:
    1004:	97 f9       	bld	r25, 7
    1006:	9f 67       	ori	r25, 0x7F	; 127
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	08 95       	ret

00001010 <__fp_nan>:
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	80 ec       	ldi	r24, 0xC0	; 192
    1014:	08 95       	ret

00001016 <__fp_pscA>:
    1016:	00 24       	eor	r0, r0
    1018:	0a 94       	dec	r0
    101a:	16 16       	cp	r1, r22
    101c:	17 06       	cpc	r1, r23
    101e:	18 06       	cpc	r1, r24
    1020:	09 06       	cpc	r0, r25
    1022:	08 95       	ret

00001024 <__fp_pscB>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	12 16       	cp	r1, r18
    102a:	13 06       	cpc	r1, r19
    102c:	14 06       	cpc	r1, r20
    102e:	05 06       	cpc	r0, r21
    1030:	08 95       	ret

00001032 <__fp_round>:
    1032:	09 2e       	mov	r0, r25
    1034:	03 94       	inc	r0
    1036:	00 0c       	add	r0, r0
    1038:	11 f4       	brne	.+4      	; 0x103e <__fp_round+0xc>
    103a:	88 23       	and	r24, r24
    103c:	52 f0       	brmi	.+20     	; 0x1052 <__fp_round+0x20>
    103e:	bb 0f       	add	r27, r27
    1040:	40 f4       	brcc	.+16     	; 0x1052 <__fp_round+0x20>
    1042:	bf 2b       	or	r27, r31
    1044:	11 f4       	brne	.+4      	; 0x104a <__fp_round+0x18>
    1046:	60 ff       	sbrs	r22, 0
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <__fp_round+0x20>
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	08 95       	ret

00001054 <__fp_split3>:
    1054:	57 fd       	sbrc	r21, 7
    1056:	90 58       	subi	r25, 0x80	; 128
    1058:	44 0f       	add	r20, r20
    105a:	55 1f       	adc	r21, r21
    105c:	59 f0       	breq	.+22     	; 0x1074 <__fp_splitA+0x10>
    105e:	5f 3f       	cpi	r21, 0xFF	; 255
    1060:	71 f0       	breq	.+28     	; 0x107e <__fp_splitA+0x1a>
    1062:	47 95       	ror	r20

00001064 <__fp_splitA>:
    1064:	88 0f       	add	r24, r24
    1066:	97 fb       	bst	r25, 7
    1068:	99 1f       	adc	r25, r25
    106a:	61 f0       	breq	.+24     	; 0x1084 <__fp_splitA+0x20>
    106c:	9f 3f       	cpi	r25, 0xFF	; 255
    106e:	79 f0       	breq	.+30     	; 0x108e <__fp_splitA+0x2a>
    1070:	87 95       	ror	r24
    1072:	08 95       	ret
    1074:	12 16       	cp	r1, r18
    1076:	13 06       	cpc	r1, r19
    1078:	14 06       	cpc	r1, r20
    107a:	55 1f       	adc	r21, r21
    107c:	f2 cf       	rjmp	.-28     	; 0x1062 <__fp_split3+0xe>
    107e:	46 95       	lsr	r20
    1080:	f1 df       	rcall	.-30     	; 0x1064 <__fp_splitA>
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <__fp_splitA+0x30>
    1084:	16 16       	cp	r1, r22
    1086:	17 06       	cpc	r1, r23
    1088:	18 06       	cpc	r1, r24
    108a:	99 1f       	adc	r25, r25
    108c:	f1 cf       	rjmp	.-30     	; 0x1070 <__fp_splitA+0xc>
    108e:	86 95       	lsr	r24
    1090:	71 05       	cpc	r23, r1
    1092:	61 05       	cpc	r22, r1
    1094:	08 94       	sec
    1096:	08 95       	ret

00001098 <__fp_zero>:
    1098:	e8 94       	clt

0000109a <__fp_szero>:
    109a:	bb 27       	eor	r27, r27
    109c:	66 27       	eor	r22, r22
    109e:	77 27       	eor	r23, r23
    10a0:	cb 01       	movw	r24, r22
    10a2:	97 f9       	bld	r25, 7
    10a4:	08 95       	ret

000010a6 <__mulsf3>:
    10a6:	0e 94 66 08 	call	0x10cc	; 0x10cc <__mulsf3x>
    10aa:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__fp_round>
    10ae:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fp_pscA>
    10b2:	38 f0       	brcs	.+14     	; 0x10c2 <__mulsf3+0x1c>
    10b4:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscB>
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__mulsf3+0x1c>
    10ba:	95 23       	and	r25, r21
    10bc:	11 f0       	breq	.+4      	; 0x10c2 <__mulsf3+0x1c>
    10be:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_inf>
    10c2:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_nan>
    10c6:	11 24       	eor	r1, r1
    10c8:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_szero>

000010cc <__mulsf3x>:
    10cc:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fp_split3>
    10d0:	70 f3       	brcs	.-36     	; 0x10ae <__mulsf3+0x8>

000010d2 <__mulsf3_pse>:
    10d2:	95 9f       	mul	r25, r21
    10d4:	c1 f3       	breq	.-16     	; 0x10c6 <__mulsf3+0x20>
    10d6:	95 0f       	add	r25, r21
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	55 1f       	adc	r21, r21
    10dc:	62 9f       	mul	r22, r18
    10de:	f0 01       	movw	r30, r0
    10e0:	72 9f       	mul	r23, r18
    10e2:	bb 27       	eor	r27, r27
    10e4:	f0 0d       	add	r31, r0
    10e6:	b1 1d       	adc	r27, r1
    10e8:	63 9f       	mul	r22, r19
    10ea:	aa 27       	eor	r26, r26
    10ec:	f0 0d       	add	r31, r0
    10ee:	b1 1d       	adc	r27, r1
    10f0:	aa 1f       	adc	r26, r26
    10f2:	64 9f       	mul	r22, r20
    10f4:	66 27       	eor	r22, r22
    10f6:	b0 0d       	add	r27, r0
    10f8:	a1 1d       	adc	r26, r1
    10fa:	66 1f       	adc	r22, r22
    10fc:	82 9f       	mul	r24, r18
    10fe:	22 27       	eor	r18, r18
    1100:	b0 0d       	add	r27, r0
    1102:	a1 1d       	adc	r26, r1
    1104:	62 1f       	adc	r22, r18
    1106:	73 9f       	mul	r23, r19
    1108:	b0 0d       	add	r27, r0
    110a:	a1 1d       	adc	r26, r1
    110c:	62 1f       	adc	r22, r18
    110e:	83 9f       	mul	r24, r19
    1110:	a0 0d       	add	r26, r0
    1112:	61 1d       	adc	r22, r1
    1114:	22 1f       	adc	r18, r18
    1116:	74 9f       	mul	r23, r20
    1118:	33 27       	eor	r19, r19
    111a:	a0 0d       	add	r26, r0
    111c:	61 1d       	adc	r22, r1
    111e:	23 1f       	adc	r18, r19
    1120:	84 9f       	mul	r24, r20
    1122:	60 0d       	add	r22, r0
    1124:	21 1d       	adc	r18, r1
    1126:	82 2f       	mov	r24, r18
    1128:	76 2f       	mov	r23, r22
    112a:	6a 2f       	mov	r22, r26
    112c:	11 24       	eor	r1, r1
    112e:	9f 57       	subi	r25, 0x7F	; 127
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	9a f0       	brmi	.+38     	; 0x115a <__mulsf3_pse+0x88>
    1134:	f1 f0       	breq	.+60     	; 0x1172 <__mulsf3_pse+0xa0>
    1136:	88 23       	and	r24, r24
    1138:	4a f0       	brmi	.+18     	; 0x114c <__mulsf3_pse+0x7a>
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	bb 1f       	adc	r27, r27
    1140:	66 1f       	adc	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	91 50       	subi	r25, 0x01	; 1
    1148:	50 40       	sbci	r21, 0x00	; 0
    114a:	a9 f7       	brne	.-22     	; 0x1136 <__mulsf3_pse+0x64>
    114c:	9e 3f       	cpi	r25, 0xFE	; 254
    114e:	51 05       	cpc	r21, r1
    1150:	80 f0       	brcs	.+32     	; 0x1172 <__mulsf3_pse+0xa0>
    1152:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_inf>
    1156:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_szero>
    115a:	5f 3f       	cpi	r21, 0xFF	; 255
    115c:	e4 f3       	brlt	.-8      	; 0x1156 <__mulsf3_pse+0x84>
    115e:	98 3e       	cpi	r25, 0xE8	; 232
    1160:	d4 f3       	brlt	.-12     	; 0x1156 <__mulsf3_pse+0x84>
    1162:	86 95       	lsr	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b7 95       	ror	r27
    116a:	f7 95       	ror	r31
    116c:	e7 95       	ror	r30
    116e:	9f 5f       	subi	r25, 0xFF	; 255
    1170:	c1 f7       	brne	.-16     	; 0x1162 <__mulsf3_pse+0x90>
    1172:	fe 2b       	or	r31, r30
    1174:	88 0f       	add	r24, r24
    1176:	91 1d       	adc	r25, r1
    1178:	96 95       	lsr	r25
    117a:	87 95       	ror	r24
    117c:	97 f9       	bld	r25, 7
    117e:	08 95       	ret

00001180 <__udivmodsi4>:
    1180:	a1 e2       	ldi	r26, 0x21	; 33
    1182:	1a 2e       	mov	r1, r26
    1184:	aa 1b       	sub	r26, r26
    1186:	bb 1b       	sub	r27, r27
    1188:	fd 01       	movw	r30, r26
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <__udivmodsi4_ep>

0000118c <__udivmodsi4_loop>:
    118c:	aa 1f       	adc	r26, r26
    118e:	bb 1f       	adc	r27, r27
    1190:	ee 1f       	adc	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	a2 17       	cp	r26, r18
    1196:	b3 07       	cpc	r27, r19
    1198:	e4 07       	cpc	r30, r20
    119a:	f5 07       	cpc	r31, r21
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__udivmodsi4_ep>
    119e:	a2 1b       	sub	r26, r18
    11a0:	b3 0b       	sbc	r27, r19
    11a2:	e4 0b       	sbc	r30, r20
    11a4:	f5 0b       	sbc	r31, r21

000011a6 <__udivmodsi4_ep>:
    11a6:	66 1f       	adc	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	1a 94       	dec	r1
    11b0:	69 f7       	brne	.-38     	; 0x118c <__udivmodsi4_loop>
    11b2:	60 95       	com	r22
    11b4:	70 95       	com	r23
    11b6:	80 95       	com	r24
    11b8:	90 95       	com	r25
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	bd 01       	movw	r22, r26
    11c0:	cf 01       	movw	r24, r30
    11c2:	08 95       	ret

000011c4 <__tablejump2__>:
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	05 90       	lpm	r0, Z+
    11ca:	f4 91       	lpm	r31, Z
    11cc:	e0 2d       	mov	r30, r0
    11ce:	09 94       	ijmp

000011d0 <calloc>:
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	86 9f       	mul	r24, r22
    11da:	80 01       	movw	r16, r0
    11dc:	87 9f       	mul	r24, r23
    11de:	10 0d       	add	r17, r0
    11e0:	96 9f       	mul	r25, r22
    11e2:	10 0d       	add	r17, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	c8 01       	movw	r24, r16
    11e8:	0e 94 04 09 	call	0x1208	; 0x1208 <malloc>
    11ec:	ec 01       	movw	r28, r24
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	29 f0       	breq	.+10     	; 0x11fc <calloc+0x2c>
    11f2:	a8 01       	movw	r20, r16
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	0e 94 25 0a 	call	0x144a	; 0x144a <memset>
    11fc:	ce 01       	movw	r24, r28
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <malloc>:
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	91 05       	cpc	r25, r1
    1214:	10 f4       	brcc	.+4      	; 0x121a <malloc+0x12>
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__flp>
    121e:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <__flp+0x1>
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	30 97       	sbiw	r30, 0x00	; 0
    122c:	19 f1       	breq	.+70     	; 0x1274 <malloc+0x6c>
    122e:	40 81       	ld	r20, Z
    1230:	51 81       	ldd	r21, Z+1	; 0x01
    1232:	02 81       	ldd	r16, Z+2	; 0x02
    1234:	13 81       	ldd	r17, Z+3	; 0x03
    1236:	48 17       	cp	r20, r24
    1238:	59 07       	cpc	r21, r25
    123a:	c8 f0       	brcs	.+50     	; 0x126e <malloc+0x66>
    123c:	84 17       	cp	r24, r20
    123e:	95 07       	cpc	r25, r21
    1240:	69 f4       	brne	.+26     	; 0x125c <malloc+0x54>
    1242:	10 97       	sbiw	r26, 0x00	; 0
    1244:	31 f0       	breq	.+12     	; 0x1252 <malloc+0x4a>
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	0c 93       	st	X, r16
    124a:	12 97       	sbiw	r26, 0x02	; 2
    124c:	13 96       	adiw	r26, 0x03	; 3
    124e:	1c 93       	st	X, r17
    1250:	27 c0       	rjmp	.+78     	; 0x12a0 <malloc+0x98>
    1252:	00 93 60 01 	sts	0x0160, r16	; 0x800160 <__flp>
    1256:	10 93 61 01 	sts	0x0161, r17	; 0x800161 <__flp+0x1>
    125a:	22 c0       	rjmp	.+68     	; 0x12a0 <malloc+0x98>
    125c:	21 15       	cp	r18, r1
    125e:	31 05       	cpc	r19, r1
    1260:	19 f0       	breq	.+6      	; 0x1268 <malloc+0x60>
    1262:	42 17       	cp	r20, r18
    1264:	53 07       	cpc	r21, r19
    1266:	18 f4       	brcc	.+6      	; 0x126e <malloc+0x66>
    1268:	9a 01       	movw	r18, r20
    126a:	bd 01       	movw	r22, r26
    126c:	ef 01       	movw	r28, r30
    126e:	df 01       	movw	r26, r30
    1270:	f8 01       	movw	r30, r16
    1272:	db cf       	rjmp	.-74     	; 0x122a <malloc+0x22>
    1274:	21 15       	cp	r18, r1
    1276:	31 05       	cpc	r19, r1
    1278:	f9 f0       	breq	.+62     	; 0x12b8 <malloc+0xb0>
    127a:	28 1b       	sub	r18, r24
    127c:	39 0b       	sbc	r19, r25
    127e:	24 30       	cpi	r18, 0x04	; 4
    1280:	31 05       	cpc	r19, r1
    1282:	80 f4       	brcc	.+32     	; 0x12a4 <malloc+0x9c>
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	61 15       	cp	r22, r1
    128a:	71 05       	cpc	r23, r1
    128c:	21 f0       	breq	.+8      	; 0x1296 <malloc+0x8e>
    128e:	fb 01       	movw	r30, r22
    1290:	93 83       	std	Z+3, r25	; 0x03
    1292:	82 83       	std	Z+2, r24	; 0x02
    1294:	04 c0       	rjmp	.+8      	; 0x129e <malloc+0x96>
    1296:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__flp+0x1>
    129a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__flp>
    129e:	fe 01       	movw	r30, r28
    12a0:	32 96       	adiw	r30, 0x02	; 2
    12a2:	44 c0       	rjmp	.+136    	; 0x132c <malloc+0x124>
    12a4:	fe 01       	movw	r30, r28
    12a6:	e2 0f       	add	r30, r18
    12a8:	f3 1f       	adc	r31, r19
    12aa:	81 93       	st	Z+, r24
    12ac:	91 93       	st	Z+, r25
    12ae:	22 50       	subi	r18, 0x02	; 2
    12b0:	31 09       	sbc	r19, r1
    12b2:	39 83       	std	Y+1, r19	; 0x01
    12b4:	28 83       	st	Y, r18
    12b6:	3a c0       	rjmp	.+116    	; 0x132c <malloc+0x124>
    12b8:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
    12bc:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
    12c0:	23 2b       	or	r18, r19
    12c2:	41 f4       	brne	.+16     	; 0x12d4 <malloc+0xcc>
    12c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    12c8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    12cc:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <__brkval+0x1>
    12d0:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__brkval>
    12d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    12d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    12dc:	21 15       	cp	r18, r1
    12de:	31 05       	cpc	r19, r1
    12e0:	41 f4       	brne	.+16     	; 0x12f2 <malloc+0xea>
    12e2:	2d b7       	in	r18, 0x3d	; 61
    12e4:	3e b7       	in	r19, 0x3e	; 62
    12e6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    12ea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    12ee:	24 1b       	sub	r18, r20
    12f0:	35 0b       	sbc	r19, r21
    12f2:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <__brkval>
    12f6:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <__brkval+0x1>
    12fa:	e2 17       	cp	r30, r18
    12fc:	f3 07       	cpc	r31, r19
    12fe:	a0 f4       	brcc	.+40     	; 0x1328 <malloc+0x120>
    1300:	2e 1b       	sub	r18, r30
    1302:	3f 0b       	sbc	r19, r31
    1304:	28 17       	cp	r18, r24
    1306:	39 07       	cpc	r19, r25
    1308:	78 f0       	brcs	.+30     	; 0x1328 <malloc+0x120>
    130a:	ac 01       	movw	r20, r24
    130c:	4e 5f       	subi	r20, 0xFE	; 254
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	24 17       	cp	r18, r20
    1312:	35 07       	cpc	r19, r21
    1314:	48 f0       	brcs	.+18     	; 0x1328 <malloc+0x120>
    1316:	4e 0f       	add	r20, r30
    1318:	5f 1f       	adc	r21, r31
    131a:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <__brkval+0x1>
    131e:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <__brkval>
    1322:	81 93       	st	Z+, r24
    1324:	91 93       	st	Z+, r25
    1326:	02 c0       	rjmp	.+4      	; 0x132c <malloc+0x124>
    1328:	e0 e0       	ldi	r30, 0x00	; 0
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	cf 01       	movw	r24, r30
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	08 95       	ret

00001338 <free>:
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	09 f4       	brne	.+2      	; 0x1342 <free+0xa>
    1340:	81 c0       	rjmp	.+258    	; 0x1444 <free+0x10c>
    1342:	fc 01       	movw	r30, r24
    1344:	32 97       	sbiw	r30, 0x02	; 2
    1346:	13 82       	std	Z+3, r1	; 0x03
    1348:	12 82       	std	Z+2, r1	; 0x02
    134a:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <__flp>
    134e:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <__flp+0x1>
    1352:	10 97       	sbiw	r26, 0x00	; 0
    1354:	81 f4       	brne	.+32     	; 0x1376 <free+0x3e>
    1356:	20 81       	ld	r18, Z
    1358:	31 81       	ldd	r19, Z+1	; 0x01
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
    1362:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
    1366:	28 17       	cp	r18, r24
    1368:	39 07       	cpc	r19, r25
    136a:	51 f5       	brne	.+84     	; 0x13c0 <free+0x88>
    136c:	f0 93 5f 01 	sts	0x015F, r31	; 0x80015f <__brkval+0x1>
    1370:	e0 93 5e 01 	sts	0x015E, r30	; 0x80015e <__brkval>
    1374:	67 c0       	rjmp	.+206    	; 0x1444 <free+0x10c>
    1376:	ed 01       	movw	r28, r26
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	ce 17       	cp	r28, r30
    137e:	df 07       	cpc	r29, r31
    1380:	40 f4       	brcc	.+16     	; 0x1392 <free+0x5a>
    1382:	4a 81       	ldd	r20, Y+2	; 0x02
    1384:	5b 81       	ldd	r21, Y+3	; 0x03
    1386:	9e 01       	movw	r18, r28
    1388:	41 15       	cp	r20, r1
    138a:	51 05       	cpc	r21, r1
    138c:	f1 f0       	breq	.+60     	; 0x13ca <free+0x92>
    138e:	ea 01       	movw	r28, r20
    1390:	f5 cf       	rjmp	.-22     	; 0x137c <free+0x44>
    1392:	d3 83       	std	Z+3, r29	; 0x03
    1394:	c2 83       	std	Z+2, r28	; 0x02
    1396:	40 81       	ld	r20, Z
    1398:	51 81       	ldd	r21, Z+1	; 0x01
    139a:	84 0f       	add	r24, r20
    139c:	95 1f       	adc	r25, r21
    139e:	c8 17       	cp	r28, r24
    13a0:	d9 07       	cpc	r29, r25
    13a2:	59 f4       	brne	.+22     	; 0x13ba <free+0x82>
    13a4:	88 81       	ld	r24, Y
    13a6:	99 81       	ldd	r25, Y+1	; 0x01
    13a8:	84 0f       	add	r24, r20
    13aa:	95 1f       	adc	r25, r21
    13ac:	02 96       	adiw	r24, 0x02	; 2
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	93 83       	std	Z+3, r25	; 0x03
    13b8:	82 83       	std	Z+2, r24	; 0x02
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	29 f4       	brne	.+10     	; 0x13ca <free+0x92>
    13c0:	f0 93 61 01 	sts	0x0161, r31	; 0x800161 <__flp+0x1>
    13c4:	e0 93 60 01 	sts	0x0160, r30	; 0x800160 <__flp>
    13c8:	3d c0       	rjmp	.+122    	; 0x1444 <free+0x10c>
    13ca:	e9 01       	movw	r28, r18
    13cc:	fb 83       	std	Y+3, r31	; 0x03
    13ce:	ea 83       	std	Y+2, r30	; 0x02
    13d0:	49 91       	ld	r20, Y+
    13d2:	59 91       	ld	r21, Y+
    13d4:	c4 0f       	add	r28, r20
    13d6:	d5 1f       	adc	r29, r21
    13d8:	ec 17       	cp	r30, r28
    13da:	fd 07       	cpc	r31, r29
    13dc:	61 f4       	brne	.+24     	; 0x13f6 <free+0xbe>
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	84 0f       	add	r24, r20
    13e4:	95 1f       	adc	r25, r21
    13e6:	02 96       	adiw	r24, 0x02	; 2
    13e8:	e9 01       	movw	r28, r18
    13ea:	99 83       	std	Y+1, r25	; 0x01
    13ec:	88 83       	st	Y, r24
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	9b 83       	std	Y+3, r25	; 0x03
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	e0 e0       	ldi	r30, 0x00	; 0
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	12 96       	adiw	r26, 0x02	; 2
    13fc:	8d 91       	ld	r24, X+
    13fe:	9c 91       	ld	r25, X
    1400:	13 97       	sbiw	r26, 0x03	; 3
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	19 f0       	breq	.+6      	; 0x140c <free+0xd4>
    1406:	fd 01       	movw	r30, r26
    1408:	dc 01       	movw	r26, r24
    140a:	f7 cf       	rjmp	.-18     	; 0x13fa <free+0xc2>
    140c:	8d 91       	ld	r24, X+
    140e:	9c 91       	ld	r25, X
    1410:	11 97       	sbiw	r26, 0x01	; 1
    1412:	9d 01       	movw	r18, r26
    1414:	2e 5f       	subi	r18, 0xFE	; 254
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
    1420:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
    1424:	28 17       	cp	r18, r24
    1426:	39 07       	cpc	r19, r25
    1428:	69 f4       	brne	.+26     	; 0x1444 <free+0x10c>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	29 f4       	brne	.+10     	; 0x1438 <free+0x100>
    142e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__flp+0x1>
    1432:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__flp>
    1436:	02 c0       	rjmp	.+4      	; 0x143c <free+0x104>
    1438:	13 82       	std	Z+3, r1	; 0x03
    143a:	12 82       	std	Z+2, r1	; 0x02
    143c:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <__brkval+0x1>
    1440:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <__brkval>
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <memset>:
    144a:	dc 01       	movw	r26, r24
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <memset+0x6>
    144e:	6d 93       	st	X+, r22
    1450:	41 50       	subi	r20, 0x01	; 1
    1452:	50 40       	sbci	r21, 0x00	; 0
    1454:	e0 f7       	brcc	.-8      	; 0x144e <memset+0x4>
    1456:	08 95       	ret

00001458 <vsnprintf>:
    1458:	ae e0       	ldi	r26, 0x0E	; 14
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	fa e0       	ldi	r31, 0x0A	; 10
    1460:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__prologue_saves__+0x1c>
    1464:	8c 01       	movw	r16, r24
    1466:	fa 01       	movw	r30, r20
    1468:	86 e0       	ldi	r24, 0x06	; 6
    146a:	8c 83       	std	Y+4, r24	; 0x04
    146c:	1a 83       	std	Y+2, r17	; 0x02
    146e:	09 83       	std	Y+1, r16	; 0x01
    1470:	77 ff       	sbrs	r23, 7
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vsnprintf+0x20>
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e8       	ldi	r23, 0x80	; 128
    1478:	cb 01       	movw	r24, r22
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	a9 01       	movw	r20, r18
    1482:	bf 01       	movw	r22, r30
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vfprintf>
    148c:	4d 81       	ldd	r20, Y+5	; 0x05
    148e:	5e 81       	ldd	r21, Y+6	; 0x06
    1490:	57 fd       	sbrc	r21, 7
    1492:	0a c0       	rjmp	.+20     	; 0x14a8 <vsnprintf+0x50>
    1494:	2f 81       	ldd	r18, Y+7	; 0x07
    1496:	38 85       	ldd	r19, Y+8	; 0x08
    1498:	42 17       	cp	r20, r18
    149a:	53 07       	cpc	r21, r19
    149c:	0c f4       	brge	.+2      	; 0x14a0 <vsnprintf+0x48>
    149e:	9a 01       	movw	r18, r20
    14a0:	f8 01       	movw	r30, r16
    14a2:	e2 0f       	add	r30, r18
    14a4:	f3 1f       	adc	r31, r19
    14a6:	10 82       	st	Z, r1
    14a8:	2e 96       	adiw	r28, 0x0e	; 14
    14aa:	e4 e0       	ldi	r30, 0x04	; 4
    14ac:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__epilogue_restores__+0x1c>

000014b0 <vfprintf>:
    14b0:	ab e0       	ldi	r26, 0x0B	; 11
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ee e5       	ldi	r30, 0x5E	; 94
    14b6:	fa e0       	ldi	r31, 0x0A	; 10
    14b8:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__prologue_saves__>
    14bc:	6c 01       	movw	r12, r24
    14be:	7b 01       	movw	r14, r22
    14c0:	8a 01       	movw	r16, r20
    14c2:	fc 01       	movw	r30, r24
    14c4:	17 82       	std	Z+7, r1	; 0x07
    14c6:	16 82       	std	Z+6, r1	; 0x06
    14c8:	83 81       	ldd	r24, Z+3	; 0x03
    14ca:	81 ff       	sbrs	r24, 1
    14cc:	cc c1       	rjmp	.+920    	; 0x1866 <vfprintf+0x3b6>
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	3c 01       	movw	r6, r24
    14d4:	f6 01       	movw	r30, r12
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	f7 01       	movw	r30, r14
    14da:	93 fd       	sbrc	r25, 3
    14dc:	85 91       	lpm	r24, Z+
    14de:	93 ff       	sbrs	r25, 3
    14e0:	81 91       	ld	r24, Z+
    14e2:	7f 01       	movw	r14, r30
    14e4:	88 23       	and	r24, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <vfprintf+0x3a>
    14e8:	ba c1       	rjmp	.+884    	; 0x185e <vfprintf+0x3ae>
    14ea:	85 32       	cpi	r24, 0x25	; 37
    14ec:	39 f4       	brne	.+14     	; 0x14fc <vfprintf+0x4c>
    14ee:	93 fd       	sbrc	r25, 3
    14f0:	85 91       	lpm	r24, Z+
    14f2:	93 ff       	sbrs	r25, 3
    14f4:	81 91       	ld	r24, Z+
    14f6:	7f 01       	movw	r14, r30
    14f8:	85 32       	cpi	r24, 0x25	; 37
    14fa:	29 f4       	brne	.+10     	; 0x1506 <vfprintf+0x56>
    14fc:	b6 01       	movw	r22, r12
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1504:	e7 cf       	rjmp	.-50     	; 0x14d4 <vfprintf+0x24>
    1506:	91 2c       	mov	r9, r1
    1508:	21 2c       	mov	r2, r1
    150a:	31 2c       	mov	r3, r1
    150c:	ff e1       	ldi	r31, 0x1F	; 31
    150e:	f3 15       	cp	r31, r3
    1510:	d8 f0       	brcs	.+54     	; 0x1548 <vfprintf+0x98>
    1512:	8b 32       	cpi	r24, 0x2B	; 43
    1514:	79 f0       	breq	.+30     	; 0x1534 <vfprintf+0x84>
    1516:	38 f4       	brcc	.+14     	; 0x1526 <vfprintf+0x76>
    1518:	80 32       	cpi	r24, 0x20	; 32
    151a:	79 f0       	breq	.+30     	; 0x153a <vfprintf+0x8a>
    151c:	83 32       	cpi	r24, 0x23	; 35
    151e:	a1 f4       	brne	.+40     	; 0x1548 <vfprintf+0x98>
    1520:	23 2d       	mov	r18, r3
    1522:	20 61       	ori	r18, 0x10	; 16
    1524:	1d c0       	rjmp	.+58     	; 0x1560 <vfprintf+0xb0>
    1526:	8d 32       	cpi	r24, 0x2D	; 45
    1528:	61 f0       	breq	.+24     	; 0x1542 <vfprintf+0x92>
    152a:	80 33       	cpi	r24, 0x30	; 48
    152c:	69 f4       	brne	.+26     	; 0x1548 <vfprintf+0x98>
    152e:	23 2d       	mov	r18, r3
    1530:	21 60       	ori	r18, 0x01	; 1
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <vfprintf+0xb0>
    1534:	83 2d       	mov	r24, r3
    1536:	82 60       	ori	r24, 0x02	; 2
    1538:	38 2e       	mov	r3, r24
    153a:	e3 2d       	mov	r30, r3
    153c:	e4 60       	ori	r30, 0x04	; 4
    153e:	3e 2e       	mov	r3, r30
    1540:	2a c0       	rjmp	.+84     	; 0x1596 <vfprintf+0xe6>
    1542:	f3 2d       	mov	r31, r3
    1544:	f8 60       	ori	r31, 0x08	; 8
    1546:	1d c0       	rjmp	.+58     	; 0x1582 <vfprintf+0xd2>
    1548:	37 fc       	sbrc	r3, 7
    154a:	2d c0       	rjmp	.+90     	; 0x15a6 <vfprintf+0xf6>
    154c:	20 ed       	ldi	r18, 0xD0	; 208
    154e:	28 0f       	add	r18, r24
    1550:	2a 30       	cpi	r18, 0x0A	; 10
    1552:	40 f0       	brcs	.+16     	; 0x1564 <vfprintf+0xb4>
    1554:	8e 32       	cpi	r24, 0x2E	; 46
    1556:	b9 f4       	brne	.+46     	; 0x1586 <vfprintf+0xd6>
    1558:	36 fc       	sbrc	r3, 6
    155a:	81 c1       	rjmp	.+770    	; 0x185e <vfprintf+0x3ae>
    155c:	23 2d       	mov	r18, r3
    155e:	20 64       	ori	r18, 0x40	; 64
    1560:	32 2e       	mov	r3, r18
    1562:	19 c0       	rjmp	.+50     	; 0x1596 <vfprintf+0xe6>
    1564:	36 fe       	sbrs	r3, 6
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <vfprintf+0xc4>
    1568:	8a e0       	ldi	r24, 0x0A	; 10
    156a:	98 9e       	mul	r9, r24
    156c:	20 0d       	add	r18, r0
    156e:	11 24       	eor	r1, r1
    1570:	92 2e       	mov	r9, r18
    1572:	11 c0       	rjmp	.+34     	; 0x1596 <vfprintf+0xe6>
    1574:	ea e0       	ldi	r30, 0x0A	; 10
    1576:	2e 9e       	mul	r2, r30
    1578:	20 0d       	add	r18, r0
    157a:	11 24       	eor	r1, r1
    157c:	22 2e       	mov	r2, r18
    157e:	f3 2d       	mov	r31, r3
    1580:	f0 62       	ori	r31, 0x20	; 32
    1582:	3f 2e       	mov	r3, r31
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <vfprintf+0xe6>
    1586:	8c 36       	cpi	r24, 0x6C	; 108
    1588:	21 f4       	brne	.+8      	; 0x1592 <vfprintf+0xe2>
    158a:	83 2d       	mov	r24, r3
    158c:	80 68       	ori	r24, 0x80	; 128
    158e:	38 2e       	mov	r3, r24
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfprintf+0xe6>
    1592:	88 36       	cpi	r24, 0x68	; 104
    1594:	41 f4       	brne	.+16     	; 0x15a6 <vfprintf+0xf6>
    1596:	f7 01       	movw	r30, r14
    1598:	93 fd       	sbrc	r25, 3
    159a:	85 91       	lpm	r24, Z+
    159c:	93 ff       	sbrs	r25, 3
    159e:	81 91       	ld	r24, Z+
    15a0:	7f 01       	movw	r14, r30
    15a2:	81 11       	cpse	r24, r1
    15a4:	b3 cf       	rjmp	.-154    	; 0x150c <vfprintf+0x5c>
    15a6:	98 2f       	mov	r25, r24
    15a8:	9f 7d       	andi	r25, 0xDF	; 223
    15aa:	95 54       	subi	r25, 0x45	; 69
    15ac:	93 30       	cpi	r25, 0x03	; 3
    15ae:	28 f4       	brcc	.+10     	; 0x15ba <vfprintf+0x10a>
    15b0:	0c 5f       	subi	r16, 0xFC	; 252
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	9f e3       	ldi	r25, 0x3F	; 63
    15b6:	99 83       	std	Y+1, r25	; 0x01
    15b8:	0d c0       	rjmp	.+26     	; 0x15d4 <vfprintf+0x124>
    15ba:	83 36       	cpi	r24, 0x63	; 99
    15bc:	31 f0       	breq	.+12     	; 0x15ca <vfprintf+0x11a>
    15be:	83 37       	cpi	r24, 0x73	; 115
    15c0:	71 f0       	breq	.+28     	; 0x15de <vfprintf+0x12e>
    15c2:	83 35       	cpi	r24, 0x53	; 83
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <vfprintf+0x118>
    15c6:	59 c0       	rjmp	.+178    	; 0x167a <vfprintf+0x1ca>
    15c8:	21 c0       	rjmp	.+66     	; 0x160c <vfprintf+0x15c>
    15ca:	f8 01       	movw	r30, r16
    15cc:	80 81       	ld	r24, Z
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	0e 5f       	subi	r16, 0xFE	; 254
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	88 24       	eor	r8, r8
    15d6:	83 94       	inc	r8
    15d8:	91 2c       	mov	r9, r1
    15da:	53 01       	movw	r10, r6
    15dc:	13 c0       	rjmp	.+38     	; 0x1604 <vfprintf+0x154>
    15de:	28 01       	movw	r4, r16
    15e0:	f2 e0       	ldi	r31, 0x02	; 2
    15e2:	4f 0e       	add	r4, r31
    15e4:	51 1c       	adc	r5, r1
    15e6:	f8 01       	movw	r30, r16
    15e8:	a0 80       	ld	r10, Z
    15ea:	b1 80       	ldd	r11, Z+1	; 0x01
    15ec:	36 fe       	sbrs	r3, 6
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <vfprintf+0x146>
    15f0:	69 2d       	mov	r22, r9
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0x14a>
    15f6:	6f ef       	ldi	r22, 0xFF	; 255
    15f8:	7f ef       	ldi	r23, 0xFF	; 255
    15fa:	c5 01       	movw	r24, r10
    15fc:	0e 94 44 0c 	call	0x1888	; 0x1888 <strnlen>
    1600:	4c 01       	movw	r8, r24
    1602:	82 01       	movw	r16, r4
    1604:	f3 2d       	mov	r31, r3
    1606:	ff 77       	andi	r31, 0x7F	; 127
    1608:	3f 2e       	mov	r3, r31
    160a:	16 c0       	rjmp	.+44     	; 0x1638 <vfprintf+0x188>
    160c:	28 01       	movw	r4, r16
    160e:	22 e0       	ldi	r18, 0x02	; 2
    1610:	42 0e       	add	r4, r18
    1612:	51 1c       	adc	r5, r1
    1614:	f8 01       	movw	r30, r16
    1616:	a0 80       	ld	r10, Z
    1618:	b1 80       	ldd	r11, Z+1	; 0x01
    161a:	36 fe       	sbrs	r3, 6
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <vfprintf+0x174>
    161e:	69 2d       	mov	r22, r9
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <vfprintf+0x178>
    1624:	6f ef       	ldi	r22, 0xFF	; 255
    1626:	7f ef       	ldi	r23, 0xFF	; 255
    1628:	c5 01       	movw	r24, r10
    162a:	0e 94 39 0c 	call	0x1872	; 0x1872 <strnlen_P>
    162e:	4c 01       	movw	r8, r24
    1630:	f3 2d       	mov	r31, r3
    1632:	f0 68       	ori	r31, 0x80	; 128
    1634:	3f 2e       	mov	r3, r31
    1636:	82 01       	movw	r16, r4
    1638:	33 fc       	sbrc	r3, 3
    163a:	1b c0       	rjmp	.+54     	; 0x1672 <vfprintf+0x1c2>
    163c:	82 2d       	mov	r24, r2
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	88 16       	cp	r8, r24
    1642:	99 06       	cpc	r9, r25
    1644:	b0 f4       	brcc	.+44     	; 0x1672 <vfprintf+0x1c2>
    1646:	b6 01       	movw	r22, r12
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1650:	2a 94       	dec	r2
    1652:	f4 cf       	rjmp	.-24     	; 0x163c <vfprintf+0x18c>
    1654:	f5 01       	movw	r30, r10
    1656:	37 fc       	sbrc	r3, 7
    1658:	85 91       	lpm	r24, Z+
    165a:	37 fe       	sbrs	r3, 7
    165c:	81 91       	ld	r24, Z+
    165e:	5f 01       	movw	r10, r30
    1660:	b6 01       	movw	r22, r12
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1668:	21 10       	cpse	r2, r1
    166a:	2a 94       	dec	r2
    166c:	21 e0       	ldi	r18, 0x01	; 1
    166e:	82 1a       	sub	r8, r18
    1670:	91 08       	sbc	r9, r1
    1672:	81 14       	cp	r8, r1
    1674:	91 04       	cpc	r9, r1
    1676:	71 f7       	brne	.-36     	; 0x1654 <vfprintf+0x1a4>
    1678:	e8 c0       	rjmp	.+464    	; 0x184a <vfprintf+0x39a>
    167a:	84 36       	cpi	r24, 0x64	; 100
    167c:	11 f0       	breq	.+4      	; 0x1682 <vfprintf+0x1d2>
    167e:	89 36       	cpi	r24, 0x69	; 105
    1680:	41 f5       	brne	.+80     	; 0x16d2 <vfprintf+0x222>
    1682:	f8 01       	movw	r30, r16
    1684:	37 fe       	sbrs	r3, 7
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <vfprintf+0x1e6>
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	0c 5f       	subi	r16, 0xFC	; 252
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <vfprintf+0x1f6>
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	07 2e       	mov	r0, r23
    169c:	00 0c       	add	r0, r0
    169e:	88 0b       	sbc	r24, r24
    16a0:	99 0b       	sbc	r25, r25
    16a2:	0e 5f       	subi	r16, 0xFE	; 254
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	f3 2d       	mov	r31, r3
    16a8:	ff 76       	andi	r31, 0x6F	; 111
    16aa:	3f 2e       	mov	r3, r31
    16ac:	97 ff       	sbrs	r25, 7
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <vfprintf+0x212>
    16b0:	90 95       	com	r25
    16b2:	80 95       	com	r24
    16b4:	70 95       	com	r23
    16b6:	61 95       	neg	r22
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	8f 4f       	sbci	r24, 0xFF	; 255
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	f0 68       	ori	r31, 0x80	; 128
    16c0:	3f 2e       	mov	r3, r31
    16c2:	2a e0       	ldi	r18, 0x0A	; 10
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	a3 01       	movw	r20, r6
    16c8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__ultoa_invert>
    16cc:	88 2e       	mov	r8, r24
    16ce:	86 18       	sub	r8, r6
    16d0:	45 c0       	rjmp	.+138    	; 0x175c <vfprintf+0x2ac>
    16d2:	85 37       	cpi	r24, 0x75	; 117
    16d4:	31 f4       	brne	.+12     	; 0x16e2 <vfprintf+0x232>
    16d6:	23 2d       	mov	r18, r3
    16d8:	2f 7e       	andi	r18, 0xEF	; 239
    16da:	b2 2e       	mov	r11, r18
    16dc:	2a e0       	ldi	r18, 0x0A	; 10
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	25 c0       	rjmp	.+74     	; 0x172c <vfprintf+0x27c>
    16e2:	93 2d       	mov	r25, r3
    16e4:	99 7f       	andi	r25, 0xF9	; 249
    16e6:	b9 2e       	mov	r11, r25
    16e8:	8f 36       	cpi	r24, 0x6F	; 111
    16ea:	c1 f0       	breq	.+48     	; 0x171c <vfprintf+0x26c>
    16ec:	18 f4       	brcc	.+6      	; 0x16f4 <vfprintf+0x244>
    16ee:	88 35       	cpi	r24, 0x58	; 88
    16f0:	79 f0       	breq	.+30     	; 0x1710 <vfprintf+0x260>
    16f2:	b5 c0       	rjmp	.+362    	; 0x185e <vfprintf+0x3ae>
    16f4:	80 37       	cpi	r24, 0x70	; 112
    16f6:	19 f0       	breq	.+6      	; 0x16fe <vfprintf+0x24e>
    16f8:	88 37       	cpi	r24, 0x78	; 120
    16fa:	21 f0       	breq	.+8      	; 0x1704 <vfprintf+0x254>
    16fc:	b0 c0       	rjmp	.+352    	; 0x185e <vfprintf+0x3ae>
    16fe:	e9 2f       	mov	r30, r25
    1700:	e0 61       	ori	r30, 0x10	; 16
    1702:	be 2e       	mov	r11, r30
    1704:	b4 fe       	sbrs	r11, 4
    1706:	0d c0       	rjmp	.+26     	; 0x1722 <vfprintf+0x272>
    1708:	fb 2d       	mov	r31, r11
    170a:	f4 60       	ori	r31, 0x04	; 4
    170c:	bf 2e       	mov	r11, r31
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <vfprintf+0x272>
    1710:	34 fe       	sbrs	r3, 4
    1712:	0a c0       	rjmp	.+20     	; 0x1728 <vfprintf+0x278>
    1714:	29 2f       	mov	r18, r25
    1716:	26 60       	ori	r18, 0x06	; 6
    1718:	b2 2e       	mov	r11, r18
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <vfprintf+0x278>
    171c:	28 e0       	ldi	r18, 0x08	; 8
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	05 c0       	rjmp	.+10     	; 0x172c <vfprintf+0x27c>
    1722:	20 e1       	ldi	r18, 0x10	; 16
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <vfprintf+0x27c>
    1728:	20 e1       	ldi	r18, 0x10	; 16
    172a:	32 e0       	ldi	r19, 0x02	; 2
    172c:	f8 01       	movw	r30, r16
    172e:	b7 fe       	sbrs	r11, 7
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <vfprintf+0x290>
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	0c 5f       	subi	r16, 0xFC	; 252
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	06 c0       	rjmp	.+12     	; 0x174c <vfprintf+0x29c>
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 5f       	subi	r16, 0xFE	; 254
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	a3 01       	movw	r20, r6
    174e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__ultoa_invert>
    1752:	88 2e       	mov	r8, r24
    1754:	86 18       	sub	r8, r6
    1756:	fb 2d       	mov	r31, r11
    1758:	ff 77       	andi	r31, 0x7F	; 127
    175a:	3f 2e       	mov	r3, r31
    175c:	36 fe       	sbrs	r3, 6
    175e:	0d c0       	rjmp	.+26     	; 0x177a <vfprintf+0x2ca>
    1760:	23 2d       	mov	r18, r3
    1762:	2e 7f       	andi	r18, 0xFE	; 254
    1764:	a2 2e       	mov	r10, r18
    1766:	89 14       	cp	r8, r9
    1768:	58 f4       	brcc	.+22     	; 0x1780 <vfprintf+0x2d0>
    176a:	34 fe       	sbrs	r3, 4
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <vfprintf+0x2d4>
    176e:	32 fc       	sbrc	r3, 2
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <vfprintf+0x2d4>
    1772:	83 2d       	mov	r24, r3
    1774:	8e 7e       	andi	r24, 0xEE	; 238
    1776:	a8 2e       	mov	r10, r24
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <vfprintf+0x2d4>
    177a:	b8 2c       	mov	r11, r8
    177c:	a3 2c       	mov	r10, r3
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <vfprintf+0x2d6>
    1780:	b8 2c       	mov	r11, r8
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <vfprintf+0x2d6>
    1784:	b9 2c       	mov	r11, r9
    1786:	a4 fe       	sbrs	r10, 4
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <vfprintf+0x2f8>
    178a:	fe 01       	movw	r30, r28
    178c:	e8 0d       	add	r30, r8
    178e:	f1 1d       	adc	r31, r1
    1790:	80 81       	ld	r24, Z
    1792:	80 33       	cpi	r24, 0x30	; 48
    1794:	21 f4       	brne	.+8      	; 0x179e <vfprintf+0x2ee>
    1796:	9a 2d       	mov	r25, r10
    1798:	99 7e       	andi	r25, 0xE9	; 233
    179a:	a9 2e       	mov	r10, r25
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <vfprintf+0x300>
    179e:	a2 fe       	sbrs	r10, 2
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <vfprintf+0x2fe>
    17a2:	b3 94       	inc	r11
    17a4:	b3 94       	inc	r11
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <vfprintf+0x300>
    17a8:	8a 2d       	mov	r24, r10
    17aa:	86 78       	andi	r24, 0x86	; 134
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <vfprintf+0x300>
    17ae:	b3 94       	inc	r11
    17b0:	a3 fc       	sbrc	r10, 3
    17b2:	11 c0       	rjmp	.+34     	; 0x17d6 <vfprintf+0x326>
    17b4:	a0 fe       	sbrs	r10, 0
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0x314>
    17b8:	b2 14       	cp	r11, r2
    17ba:	88 f4       	brcc	.+34     	; 0x17de <vfprintf+0x32e>
    17bc:	28 0c       	add	r2, r8
    17be:	92 2c       	mov	r9, r2
    17c0:	9b 18       	sub	r9, r11
    17c2:	0e c0       	rjmp	.+28     	; 0x17e0 <vfprintf+0x330>
    17c4:	b2 14       	cp	r11, r2
    17c6:	60 f4       	brcc	.+24     	; 0x17e0 <vfprintf+0x330>
    17c8:	b6 01       	movw	r22, r12
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    17d2:	b3 94       	inc	r11
    17d4:	f7 cf       	rjmp	.-18     	; 0x17c4 <vfprintf+0x314>
    17d6:	b2 14       	cp	r11, r2
    17d8:	18 f4       	brcc	.+6      	; 0x17e0 <vfprintf+0x330>
    17da:	2b 18       	sub	r2, r11
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x332>
    17de:	98 2c       	mov	r9, r8
    17e0:	21 2c       	mov	r2, r1
    17e2:	a4 fe       	sbrs	r10, 4
    17e4:	10 c0       	rjmp	.+32     	; 0x1806 <vfprintf+0x356>
    17e6:	b6 01       	movw	r22, r12
    17e8:	80 e3       	ldi	r24, 0x30	; 48
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    17f0:	a2 fe       	sbrs	r10, 2
    17f2:	17 c0       	rjmp	.+46     	; 0x1822 <vfprintf+0x372>
    17f4:	a1 fc       	sbrc	r10, 1
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <vfprintf+0x34e>
    17f8:	88 e7       	ldi	r24, 0x78	; 120
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <vfprintf+0x352>
    17fe:	88 e5       	ldi	r24, 0x58	; 88
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	b6 01       	movw	r22, r12
    1804:	0c c0       	rjmp	.+24     	; 0x181e <vfprintf+0x36e>
    1806:	8a 2d       	mov	r24, r10
    1808:	86 78       	andi	r24, 0x86	; 134
    180a:	59 f0       	breq	.+22     	; 0x1822 <vfprintf+0x372>
    180c:	a1 fe       	sbrs	r10, 1
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <vfprintf+0x364>
    1810:	8b e2       	ldi	r24, 0x2B	; 43
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <vfprintf+0x366>
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	a7 fc       	sbrc	r10, 7
    1818:	8d e2       	ldi	r24, 0x2D	; 45
    181a:	b6 01       	movw	r22, r12
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1822:	89 14       	cp	r8, r9
    1824:	38 f4       	brcc	.+14     	; 0x1834 <vfprintf+0x384>
    1826:	b6 01       	movw	r22, r12
    1828:	80 e3       	ldi	r24, 0x30	; 48
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1830:	9a 94       	dec	r9
    1832:	f7 cf       	rjmp	.-18     	; 0x1822 <vfprintf+0x372>
    1834:	8a 94       	dec	r8
    1836:	f3 01       	movw	r30, r6
    1838:	e8 0d       	add	r30, r8
    183a:	f1 1d       	adc	r31, r1
    183c:	80 81       	ld	r24, Z
    183e:	b6 01       	movw	r22, r12
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1846:	81 10       	cpse	r8, r1
    1848:	f5 cf       	rjmp	.-22     	; 0x1834 <vfprintf+0x384>
    184a:	22 20       	and	r2, r2
    184c:	09 f4       	brne	.+2      	; 0x1850 <vfprintf+0x3a0>
    184e:	42 ce       	rjmp	.-892    	; 0x14d4 <vfprintf+0x24>
    1850:	b6 01       	movw	r22, r12
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    185a:	2a 94       	dec	r2
    185c:	f6 cf       	rjmp	.-20     	; 0x184a <vfprintf+0x39a>
    185e:	f6 01       	movw	r30, r12
    1860:	86 81       	ldd	r24, Z+6	; 0x06
    1862:	97 81       	ldd	r25, Z+7	; 0x07
    1864:	02 c0       	rjmp	.+4      	; 0x186a <vfprintf+0x3ba>
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	9f ef       	ldi	r25, 0xFF	; 255
    186a:	2b 96       	adiw	r28, 0x0b	; 11
    186c:	e2 e1       	ldi	r30, 0x12	; 18
    186e:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__epilogue_restores__>

00001872 <strnlen_P>:
    1872:	fc 01       	movw	r30, r24
    1874:	05 90       	lpm	r0, Z+
    1876:	61 50       	subi	r22, 0x01	; 1
    1878:	70 40       	sbci	r23, 0x00	; 0
    187a:	01 10       	cpse	r0, r1
    187c:	d8 f7       	brcc	.-10     	; 0x1874 <strnlen_P+0x2>
    187e:	80 95       	com	r24
    1880:	90 95       	com	r25
    1882:	8e 0f       	add	r24, r30
    1884:	9f 1f       	adc	r25, r31
    1886:	08 95       	ret

00001888 <strnlen>:
    1888:	fc 01       	movw	r30, r24
    188a:	61 50       	subi	r22, 0x01	; 1
    188c:	70 40       	sbci	r23, 0x00	; 0
    188e:	01 90       	ld	r0, Z+
    1890:	01 10       	cpse	r0, r1
    1892:	d8 f7       	brcc	.-10     	; 0x188a <strnlen+0x2>
    1894:	80 95       	com	r24
    1896:	90 95       	com	r25
    1898:	8e 0f       	add	r24, r30
    189a:	9f 1f       	adc	r25, r31
    189c:	08 95       	ret

0000189e <fputc>:
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	fb 01       	movw	r30, r22
    18a8:	23 81       	ldd	r18, Z+3	; 0x03
    18aa:	21 fd       	sbrc	r18, 1
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <fputc+0x16>
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	9f ef       	ldi	r25, 0xFF	; 255
    18b2:	2c c0       	rjmp	.+88     	; 0x190c <fputc+0x6e>
    18b4:	22 ff       	sbrs	r18, 2
    18b6:	16 c0       	rjmp	.+44     	; 0x18e4 <fputc+0x46>
    18b8:	46 81       	ldd	r20, Z+6	; 0x06
    18ba:	57 81       	ldd	r21, Z+7	; 0x07
    18bc:	24 81       	ldd	r18, Z+4	; 0x04
    18be:	35 81       	ldd	r19, Z+5	; 0x05
    18c0:	42 17       	cp	r20, r18
    18c2:	53 07       	cpc	r21, r19
    18c4:	44 f4       	brge	.+16     	; 0x18d6 <fputc+0x38>
    18c6:	a0 81       	ld	r26, Z
    18c8:	b1 81       	ldd	r27, Z+1	; 0x01
    18ca:	9d 01       	movw	r18, r26
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	31 83       	std	Z+1, r19	; 0x01
    18d2:	20 83       	st	Z, r18
    18d4:	8c 93       	st	X, r24
    18d6:	26 81       	ldd	r18, Z+6	; 0x06
    18d8:	37 81       	ldd	r19, Z+7	; 0x07
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	37 83       	std	Z+7, r19	; 0x07
    18e0:	26 83       	std	Z+6, r18	; 0x06
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <fputc+0x6e>
    18e4:	8b 01       	movw	r16, r22
    18e6:	ec 01       	movw	r28, r24
    18e8:	fb 01       	movw	r30, r22
    18ea:	00 84       	ldd	r0, Z+8	; 0x08
    18ec:	f1 85       	ldd	r31, Z+9	; 0x09
    18ee:	e0 2d       	mov	r30, r0
    18f0:	09 95       	icall
    18f2:	89 2b       	or	r24, r25
    18f4:	e1 f6       	brne	.-72     	; 0x18ae <fputc+0x10>
    18f6:	d8 01       	movw	r26, r16
    18f8:	16 96       	adiw	r26, 0x06	; 6
    18fa:	8d 91       	ld	r24, X+
    18fc:	9c 91       	ld	r25, X
    18fe:	17 97       	sbiw	r26, 0x07	; 7
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	17 96       	adiw	r26, 0x07	; 7
    1904:	9c 93       	st	X, r25
    1906:	8e 93       	st	-X, r24
    1908:	16 97       	sbiw	r26, 0x06	; 6
    190a:	ce 01       	movw	r24, r28
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <__ultoa_invert>:
    1916:	fa 01       	movw	r30, r20
    1918:	aa 27       	eor	r26, r26
    191a:	28 30       	cpi	r18, 0x08	; 8
    191c:	51 f1       	breq	.+84     	; 0x1972 <__ultoa_invert+0x5c>
    191e:	20 31       	cpi	r18, 0x10	; 16
    1920:	81 f1       	breq	.+96     	; 0x1982 <__ultoa_invert+0x6c>
    1922:	e8 94       	clt
    1924:	6f 93       	push	r22
    1926:	6e 7f       	andi	r22, 0xFE	; 254
    1928:	6e 5f       	subi	r22, 0xFE	; 254
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	8f 4f       	sbci	r24, 0xFF	; 255
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	af 4f       	sbci	r26, 0xFF	; 255
    1932:	b1 e0       	ldi	r27, 0x01	; 1
    1934:	3e d0       	rcall	.+124    	; 0x19b2 <__ultoa_invert+0x9c>
    1936:	b4 e0       	ldi	r27, 0x04	; 4
    1938:	3c d0       	rcall	.+120    	; 0x19b2 <__ultoa_invert+0x9c>
    193a:	67 0f       	add	r22, r23
    193c:	78 1f       	adc	r23, r24
    193e:	89 1f       	adc	r24, r25
    1940:	9a 1f       	adc	r25, r26
    1942:	a1 1d       	adc	r26, r1
    1944:	68 0f       	add	r22, r24
    1946:	79 1f       	adc	r23, r25
    1948:	8a 1f       	adc	r24, r26
    194a:	91 1d       	adc	r25, r1
    194c:	a1 1d       	adc	r26, r1
    194e:	6a 0f       	add	r22, r26
    1950:	71 1d       	adc	r23, r1
    1952:	81 1d       	adc	r24, r1
    1954:	91 1d       	adc	r25, r1
    1956:	a1 1d       	adc	r26, r1
    1958:	20 d0       	rcall	.+64     	; 0x199a <__ultoa_invert+0x84>
    195a:	09 f4       	brne	.+2      	; 0x195e <__ultoa_invert+0x48>
    195c:	68 94       	set
    195e:	3f 91       	pop	r19
    1960:	2a e0       	ldi	r18, 0x0A	; 10
    1962:	26 9f       	mul	r18, r22
    1964:	11 24       	eor	r1, r1
    1966:	30 19       	sub	r19, r0
    1968:	30 5d       	subi	r19, 0xD0	; 208
    196a:	31 93       	st	Z+, r19
    196c:	de f6       	brtc	.-74     	; 0x1924 <__ultoa_invert+0xe>
    196e:	cf 01       	movw	r24, r30
    1970:	08 95       	ret
    1972:	46 2f       	mov	r20, r22
    1974:	47 70       	andi	r20, 0x07	; 7
    1976:	40 5d       	subi	r20, 0xD0	; 208
    1978:	41 93       	st	Z+, r20
    197a:	b3 e0       	ldi	r27, 0x03	; 3
    197c:	0f d0       	rcall	.+30     	; 0x199c <__ultoa_invert+0x86>
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__ultoa_invert+0x5c>
    1980:	f6 cf       	rjmp	.-20     	; 0x196e <__ultoa_invert+0x58>
    1982:	46 2f       	mov	r20, r22
    1984:	4f 70       	andi	r20, 0x0F	; 15
    1986:	40 5d       	subi	r20, 0xD0	; 208
    1988:	4a 33       	cpi	r20, 0x3A	; 58
    198a:	18 f0       	brcs	.+6      	; 0x1992 <__ultoa_invert+0x7c>
    198c:	49 5d       	subi	r20, 0xD9	; 217
    198e:	31 fd       	sbrc	r19, 1
    1990:	40 52       	subi	r20, 0x20	; 32
    1992:	41 93       	st	Z+, r20
    1994:	02 d0       	rcall	.+4      	; 0x199a <__ultoa_invert+0x84>
    1996:	a9 f7       	brne	.-22     	; 0x1982 <__ultoa_invert+0x6c>
    1998:	ea cf       	rjmp	.-44     	; 0x196e <__ultoa_invert+0x58>
    199a:	b4 e0       	ldi	r27, 0x04	; 4
    199c:	a6 95       	lsr	r26
    199e:	97 95       	ror	r25
    19a0:	87 95       	ror	r24
    19a2:	77 95       	ror	r23
    19a4:	67 95       	ror	r22
    19a6:	ba 95       	dec	r27
    19a8:	c9 f7       	brne	.-14     	; 0x199c <__ultoa_invert+0x86>
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 05       	cpc	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	08 95       	ret
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	0a 2e       	mov	r0, r26
    19b8:	06 94       	lsr	r0
    19ba:	57 95       	ror	r21
    19bc:	47 95       	ror	r20
    19be:	37 95       	ror	r19
    19c0:	27 95       	ror	r18
    19c2:	ba 95       	dec	r27
    19c4:	c9 f7       	brne	.-14     	; 0x19b8 <__ultoa_invert+0xa2>
    19c6:	62 0f       	add	r22, r18
    19c8:	73 1f       	adc	r23, r19
    19ca:	84 1f       	adc	r24, r20
    19cc:	95 1f       	adc	r25, r21
    19ce:	a0 1d       	adc	r26, r0
    19d0:	08 95       	ret

000019d2 <__prologue_saves__>:
    19d2:	2f 92       	push	r2
    19d4:	3f 92       	push	r3
    19d6:	4f 92       	push	r4
    19d8:	5f 92       	push	r5
    19da:	6f 92       	push	r6
    19dc:	7f 92       	push	r7
    19de:	8f 92       	push	r8
    19e0:	9f 92       	push	r9
    19e2:	af 92       	push	r10
    19e4:	bf 92       	push	r11
    19e6:	cf 92       	push	r12
    19e8:	df 92       	push	r13
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	ca 1b       	sub	r28, r26
    19fc:	db 0b       	sbc	r29, r27
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	09 94       	ijmp

00001a0a <__epilogue_restores__>:
    1a0a:	2a 88       	ldd	r2, Y+18	; 0x12
    1a0c:	39 88       	ldd	r3, Y+17	; 0x11
    1a0e:	48 88       	ldd	r4, Y+16	; 0x10
    1a10:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a12:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a14:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a16:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a18:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a1c:	b9 84       	ldd	r11, Y+9	; 0x09
    1a1e:	c8 84       	ldd	r12, Y+8	; 0x08
    1a20:	df 80       	ldd	r13, Y+7	; 0x07
    1a22:	ee 80       	ldd	r14, Y+6	; 0x06
    1a24:	fd 80       	ldd	r15, Y+5	; 0x05
    1a26:	0c 81       	ldd	r16, Y+4	; 0x04
    1a28:	1b 81       	ldd	r17, Y+3	; 0x03
    1a2a:	aa 81       	ldd	r26, Y+2	; 0x02
    1a2c:	b9 81       	ldd	r27, Y+1	; 0x01
    1a2e:	ce 0f       	add	r28, r30
    1a30:	d1 1d       	adc	r29, r1
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	ed 01       	movw	r28, r26
    1a3e:	08 95       	ret

00001a40 <__do_global_dtors>:
    1a40:	10 e0       	ldi	r17, 0x00	; 0
    1a42:	cb e5       	ldi	r28, 0x5B	; 91
    1a44:	d0 e0       	ldi	r29, 0x00	; 0
    1a46:	04 c0       	rjmp	.+8      	; 0x1a50 <__do_global_dtors+0x10>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__tablejump2__>
    1a4e:	21 96       	adiw	r28, 0x01	; 1
    1a50:	cd 35       	cpi	r28, 0x5D	; 93
    1a52:	d1 07       	cpc	r29, r17
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__do_global_dtors+0x8>
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
